/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlocsFileFileParserRuleCall_0_0());
				}
				lv_blocsFile_0_0=ruleFile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"blocsFile",
						lv_blocsFile_0_0,
						"org.xtext.example.mydsl.MyDsl.File");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlocsAlgoAlgorithmParserRuleCall_1_0());
				}
				lv_blocsAlgo_1_0=ruleAlgorithm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"blocsAlgo",
						lv_blocsAlgo_1_0,
						"org.xtext.example.mydsl.MyDsl.Algorithm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlocsParaParameterDeclarationParserRuleCall_2_0());
				}
				lv_blocsPara_2_0=ruleParameterDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"blocsPara",
						lv_blocsPara_2_0,
						"org.xtext.example.mydsl.MyDsl.ParameterDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlocsColuColumnDeclarationsParserRuleCall_3_0());
				}
				lv_blocsColu_3_0=ruleColumnDeclarations
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"blocsColu",
						lv_blocsColu_3_0,
						"org.xtext.example.mydsl.MyDsl.ColumnDeclarations");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Use source data :'
		{
			newLeafNode(otherlv_0, grammarAccess.getFileAccess().getUseSourceDataKeyword_0());
		}
		(
			(
				lv_PATH_1_0=RULE_STRING
				{
					newLeafNode(lv_PATH_1_0, grammarAccess.getFileAccess().getPATHSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFileRule());
					}
					setWithLastConsumed(
						$current,
						"PATH",
						lv_PATH_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='\n'
		{
			newLeafNode(otherlv_2, grammarAccess.getFileAccess().getLineFeedKeyword_2());
		}
	)
;

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmRule()); }
	iv_ruleAlgorithm=ruleAlgorithm
	{ $current=$iv_ruleAlgorithm.current; }
	EOF;

// Rule Algorithm
ruleAlgorithm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAlgorithmAccess().getAlgorithmAction_0(),
					$current);
			}
		)
		otherlv_1='Use algorithm'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlgorithmAccess().getUseAlgorithmKeyword_1());
		}
		(
			(
				lv_Name_2_0=RULE_ID
				{
					newLeafNode(lv_Name_2_0, grammarAccess.getAlgorithmAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgorithmRule());
					}
					setWithLastConsumed(
						$current,
						"Name",
						lv_Name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='with\n'
		{
			newLeafNode(otherlv_3, grammarAccess.getAlgorithmAccess().getWithKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAlgorithmAccess().getBlocAlgoDeclarationParserRuleCall_4_0_0());
					}
					lv_Bloc_4_0=ruleAlgoDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
						}
						add(
							$current,
							"Bloc",
							lv_Bloc_4_0,
							"org.xtext.example.mydsl.MyDsl.AlgoDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='\n'
			{
				newLeafNode(otherlv_5, grammarAccess.getAlgorithmAccess().getLineFeedKeyword_4_1());
			}
		)*
	)
;

// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); }
	iv_ruleParameterDeclaration=ruleParameterDeclaration
	{ $current=$iv_ruleParameterDeclaration.current; }
	EOF;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='Use parameters :\n'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterDeclarationAccess().getUseParametersKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterDeclarationAccess().getBlocParaDeclarationParserRuleCall_2_0_0());
					}
					lv_Bloc_2_0=ruleParaDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterDeclarationRule());
						}
						add(
							$current,
							"Bloc",
							lv_Bloc_2_0,
							"org.xtext.example.mydsl.MyDsl.ParaDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='\n'
			{
				newLeafNode(otherlv_3, grammarAccess.getParameterDeclarationAccess().getLineFeedKeyword_2_1());
			}
		)*
	)
;

// Entry rule entryRuleColumnDeclarations
entryRuleColumnDeclarations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnDeclarationsRule()); }
	iv_ruleColumnDeclarations=ruleColumnDeclarations
	{ $current=$iv_ruleColumnDeclarations.current; }
	EOF;

// Rule ColumnDeclarations
ruleColumnDeclarations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getColumnDeclarationsAccess().getColumnDeclarationsAction_0(),
					$current);
			}
		)
		otherlv_1='Use columns :\n'
		{
			newLeafNode(otherlv_1, grammarAccess.getColumnDeclarationsAccess().getUseColumnsKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnDeclarationsAccess().getBlocColumnDeclarationParserRuleCall_2_0_0());
					}
					lv_Bloc_2_0=ruleColumnDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnDeclarationsRule());
						}
						add(
							$current,
							"Bloc",
							lv_Bloc_2_0,
							"org.xtext.example.mydsl.MyDsl.ColumnDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='\n'
			{
				newLeafNode(otherlv_3, grammarAccess.getColumnDeclarationsAccess().getLineFeedKeyword_2_1());
			}
		)*
	)
;

// Entry rule entryRuleAlgoDeclaration
entryRuleAlgoDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgoDeclarationRule()); }
	iv_ruleAlgoDeclaration=ruleAlgoDeclaration
	{ $current=$iv_ruleAlgoDeclaration.current; }
	EOF;

// Rule AlgoDeclaration
ruleAlgoDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_Name_0_0=RULE_ID
				{
					newLeafNode(lv_Name_0_0, grammarAccess.getAlgoDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgoDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"Name",
						lv_Name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='as'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlgoDeclarationAccess().getAsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgoDeclarationAccess().getValueValueParserRuleCall_2_0());
				}
				lv_Value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgoDeclarationRule());
					}
					set(
						$current,
						"Value",
						lv_Value_2_0,
						"org.xtext.example.mydsl.MyDsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParaDeclaration
entryRuleParaDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParaDeclarationRule()); }
	iv_ruleParaDeclaration=ruleParaDeclaration
	{ $current=$iv_ruleParaDeclaration.current; }
	EOF;

// Rule ParaDeclaration
ruleParaDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_Name_0_0=RULE_ID
				{
					newLeafNode(lv_Name_0_0, grammarAccess.getParaDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParaDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"Name",
						lv_Name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='values'
		{
			newLeafNode(otherlv_1, grammarAccess.getParaDeclarationAccess().getValuesKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParaDeclarationAccess().getValueValueParserRuleCall_2_0());
				}
				lv_Value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParaDeclarationRule());
					}
					set(
						$current,
						"Value",
						lv_Value_2_0,
						"org.xtext.example.mydsl.MyDsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColumnDeclaration
entryRuleColumnDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnDeclarationRule()); }
	iv_ruleColumnDeclaration=ruleColumnDeclaration
	{ $current=$iv_ruleColumnDeclaration.current; }
	EOF;

// Rule ColumnDeclaration
ruleColumnDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnDeclarationAccess().getColumnsColumnSetParserRuleCall_0_0());
				}
				lv_Columns_0_0=ruleColumnSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnDeclarationRule());
					}
					set(
						$current,
						"Columns",
						lv_Columns_0_0,
						"org.xtext.example.mydsl.MyDsl.ColumnSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='as'
		{
			newLeafNode(otherlv_1, grammarAccess.getColumnDeclarationAccess().getAsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnDeclarationAccess().getTypeTargetPredictiveParserRuleCall_2_0());
				}
				lv_Type_2_0=ruleTargetPredictive
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnDeclarationRule());
					}
					set(
						$current,
						"Type",
						lv_Type_2_0,
						"org.xtext.example.mydsl.MyDsl.TargetPredictive");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColumnSet
entryRuleColumnSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnSetRule()); }
	iv_ruleColumnSet=ruleColumnSet
	{ $current=$iv_ruleColumnSet.current; }
	EOF;

// Rule ColumnSet
ruleColumnSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getColumnSetAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnSetAccess().getArgBin1ColumnSetParserRuleCall_0_1_0());
					}
					lv_ArgBin1_1_0=ruleColumnSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnSetRule());
						}
						set(
							$current,
							"ArgBin1",
							lv_ArgBin1_1_0,
							"org.xtext.example.mydsl.MyDsl.ColumnSet");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getColumnSetAccess().getRightParenthesisKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnSetAccess().getOpTypeBinopParserRuleCall_0_3_0());
					}
					lv_opType_3_0=ruleBinop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnSetRule());
						}
						set(
							$current,
							"opType",
							lv_opType_3_0,
							"org.xtext.example.mydsl.MyDsl.Binop");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getColumnSetAccess().getLeftParenthesisKeyword_0_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnSetAccess().getArgBin2ColumnSetParserRuleCall_0_5_0());
					}
					lv_ArgBin2_5_0=ruleColumnSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnSetRule());
						}
						set(
							$current,
							"ArgBin2",
							lv_ArgBin2_5_0,
							"org.xtext.example.mydsl.MyDsl.ColumnSet");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getColumnSetAccess().getRightParenthesisKeyword_0_6());
			}
		)
		    |
		(
			otherlv_7='From'
			{
				newLeafNode(otherlv_7, grammarAccess.getColumnSetAccess().getFromKeyword_1_0());
			}
			(
				(
					lv_ArgR1_8_0=RULE_INT
					{
						newLeafNode(lv_ArgR1_8_0, grammarAccess.getColumnSetAccess().getArgR1INTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnSetRule());
						}
						setWithLastConsumed(
							$current,
							"ArgR1",
							lv_ArgR1_8_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_9='to'
			{
				newLeafNode(otherlv_9, grammarAccess.getColumnSetAccess().getToKeyword_1_2());
			}
			(
				(
					lv_ArgR2_10_0=RULE_INT
					{
						newLeafNode(lv_ArgR2_10_0, grammarAccess.getColumnSetAccess().getArgR2INTTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnSetRule());
						}
						setWithLastConsumed(
							$current,
							"ArgR2",
							lv_ArgR2_10_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			otherlv_11='['
			{
				newLeafNode(otherlv_11, grammarAccess.getColumnSetAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					(
						lv_ArgList_12_0=RULE_INT
						{
							newLeafNode(lv_ArgList_12_0, grammarAccess.getColumnSetAccess().getArgListINTTerminalRuleCall_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getColumnSetRule());
							}
							addWithLastConsumed(
								$current,
								"ArgList",
								lv_ArgList_12_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getColumnSetAccess().getCommaKeyword_2_1_1());
				}
			)*
			(
				(
					lv_ArgList_14_0=RULE_INT
					{
						newLeafNode(lv_ArgList_14_0, grammarAccess.getColumnSetAccess().getArgListINTTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnSetRule());
						}
						addWithLastConsumed(
							$current,
							"ArgList",
							lv_ArgList_14_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_15=']'
			{
				newLeafNode(otherlv_15, grammarAccess.getColumnSetAccess().getRightSquareBracketKeyword_2_3());
			}
		)
	)
;

// Entry rule entryRuleBinop
entryRuleBinop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinopRule()); }
	iv_ruleBinop=ruleBinop
	{ $current=$iv_ruleBinop.current; }
	EOF;

// Rule Binop
ruleBinop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0='and'
				{
					newLeafNode(lv_type_0_0, grammarAccess.getBinopAccess().getTypeAndKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinopRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_0, "and");
				}
			)
		)
		    |
		(
			(
				lv_type_1_0='except'
				{
					newLeafNode(lv_type_1_0, grammarAccess.getBinopAccess().getTypeExceptKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinopRule());
					}
					setWithLastConsumed($current, "type", lv_type_1_0, "except");
				}
			)
		)
	)
;

// Entry rule entryRuleTargetPredictive
entryRuleTargetPredictive returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetPredictiveRule()); }
	iv_ruleTargetPredictive=ruleTargetPredictive
	{ $current=$iv_ruleTargetPredictive.current; }
	EOF;

// Rule TargetPredictive
ruleTargetPredictive returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0='target'
				{
					newLeafNode(lv_type_0_0, grammarAccess.getTargetPredictiveAccess().getTypeTargetKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTargetPredictiveRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_0, "target");
				}
			)
		)
		    |
		(
			(
				lv_type_1_0='predictive'
				{
					newLeafNode(lv_type_1_0, grammarAccess.getTargetPredictiveAccess().getTypePredictiveKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTargetPredictiveRule());
					}
					setWithLastConsumed($current, "type", lv_type_1_0, "predictive");
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_int_0_0=RULE_INT
				{
					newLeafNode(lv_int_0_0, grammarAccess.getValueAccess().getIntINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed(
						$current,
						"int",
						lv_int_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_str_1_0=RULE_STRING
				{
					newLeafNode(lv_str_1_0, grammarAccess.getValueAccess().getStrSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed(
						$current,
						"str",
						lv_str_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getFloatFLOATParserRuleCall_2_0());
				}
				lv_float_2_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"float",
						lv_float_2_0,
						"org.xtext.example.mydsl.MyDsl.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getBoolBOOLParserRuleCall_3_0());
				}
				lv_bool_3_0=ruleBOOL
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"bool",
						lv_bool_3_0,
						"org.xtext.example.mydsl.MyDsl.BOOL");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current; }
	EOF;

// Rule FLOAT
ruleFLOAT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_IntPart_0_0=RULE_INT
				{
					newLeafNode(lv_IntPart_0_0, grammarAccess.getFLOATAccess().getIntPartINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFLOATRule());
					}
					setWithLastConsumed(
						$current,
						"IntPart",
						lv_IntPart_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getFLOATAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_DecPart_2_0=RULE_INT
				{
					newLeafNode(lv_DecPart_2_0, grammarAccess.getFLOATAccess().getDecPartINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFLOATRule());
					}
					setWithLastConsumed(
						$current,
						"DecPart",
						lv_DecPart_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleBOOL
entryRuleBOOL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBOOLRule()); }
	iv_ruleBOOL=ruleBOOL
	{ $current=$iv_ruleBOOL.current; }
	EOF;

// Rule BOOL
ruleBOOL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='true'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBOOLAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBOOLRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_value_1_0='false'
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBOOLAccess().getValueFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBOOLRule());
					}
					setWithLastConsumed($current, "value", lv_value_1_0, "false");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
