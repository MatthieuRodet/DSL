/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.perfectML;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see org.xtext.example.perfectML.perfectML.PerfectMLFactory
 * @model kind="package"
 * @generated
 */
public interface PerfectMLPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "perfectML";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.org/example/perfectML/PerfectML";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "perfectML";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  PerfectMLPackage eINSTANCE = org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl.init();

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.PerfectMLFileImpl <em>File</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLFileImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getPerfectMLFile()
   * @generated
   */
  int PERFECT_ML_FILE = 0;

  /**
   * The feature id for the '<em><b>Programs</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PERFECT_ML_FILE__PROGRAMS = 0;

  /**
   * The number of structural features of the '<em>File</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PERFECT_ML_FILE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.ProgramImpl <em>Program</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.ProgramImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getProgram()
   * @generated
   */
  int PROGRAM = 1;

  /**
   * The feature id for the '<em><b>Input</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__INPUT = 0;

  /**
   * The feature id for the '<em><b>Output</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__OUTPUT = 1;

  /**
   * The feature id for the '<em><b>Algo</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__ALGO = 2;

  /**
   * The feature id for the '<em><b>Nbtraining</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__NBTRAINING = 3;

  /**
   * The feature id for the '<em><b>Column</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__COLUMN = 4;

  /**
   * The number of structural features of the '<em>Program</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_FEATURE_COUNT = 5;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.InputImpl <em>Input</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.InputImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getInput()
   * @generated
   */
  int INPUT = 2;

  /**
   * The feature id for the '<em><b>PATH</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int INPUT__PATH = 0;

  /**
   * The number of structural features of the '<em>Input</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int INPUT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.OutputImpl <em>Output</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.OutputImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getOutput()
   * @generated
   */
  int OUTPUT = 3;

  /**
   * The feature id for the '<em><b>PATH</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OUTPUT__PATH = 0;

  /**
   * The number of structural features of the '<em>Output</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OUTPUT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.AlgorithmImpl <em>Algorithm</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.AlgorithmImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getAlgorithm()
   * @generated
   */
  int ALGORITHM = 4;

  /**
   * The number of structural features of the '<em>Algorithm</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALGORITHM_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl <em>MLP Classifier</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getMLPClassifier()
   * @generated
   */
  int MLP_CLASSIFIER = 5;

  /**
   * The feature id for the '<em><b>Hidden layer sizes def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__HIDDEN_LAYER_SIZES_DEF = ALGORITHM_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Hidden layer sizes</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__HIDDEN_LAYER_SIZES = ALGORITHM_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Activation def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__ACTIVATION_DEF = ALGORITHM_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>Activation</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__ACTIVATION = ALGORITHM_FEATURE_COUNT + 3;

  /**
   * The feature id for the '<em><b>Solver def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__SOLVER_DEF = ALGORITHM_FEATURE_COUNT + 4;

  /**
   * The feature id for the '<em><b>Solver</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__SOLVER = ALGORITHM_FEATURE_COUNT + 5;

  /**
   * The feature id for the '<em><b>Alpha def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__ALPHA_DEF = ALGORITHM_FEATURE_COUNT + 6;

  /**
   * The feature id for the '<em><b>Alpha</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__ALPHA = ALGORITHM_FEATURE_COUNT + 7;

  /**
   * The feature id for the '<em><b>Batch size def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__BATCH_SIZE_DEF = ALGORITHM_FEATURE_COUNT + 8;

  /**
   * The feature id for the '<em><b>Batch size</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__BATCH_SIZE = ALGORITHM_FEATURE_COUNT + 9;

  /**
   * The feature id for the '<em><b>Learning rate def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__LEARNING_RATE_DEF = ALGORITHM_FEATURE_COUNT + 10;

  /**
   * The feature id for the '<em><b>Learning rate</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__LEARNING_RATE = ALGORITHM_FEATURE_COUNT + 11;

  /**
   * The feature id for the '<em><b>Learning rate init def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__LEARNING_RATE_INIT_DEF = ALGORITHM_FEATURE_COUNT + 12;

  /**
   * The feature id for the '<em><b>Learning rate init</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__LEARNING_RATE_INIT = ALGORITHM_FEATURE_COUNT + 13;

  /**
   * The feature id for the '<em><b>Power tdef</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__POWER_TDEF = ALGORITHM_FEATURE_COUNT + 14;

  /**
   * The feature id for the '<em><b>Power t</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__POWER_T = ALGORITHM_FEATURE_COUNT + 15;

  /**
   * The feature id for the '<em><b>Max iteer def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__MAX_ITEER_DEF = ALGORITHM_FEATURE_COUNT + 16;

  /**
   * The feature id for the '<em><b>Max iter</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__MAX_ITER = ALGORITHM_FEATURE_COUNT + 17;

  /**
   * The feature id for the '<em><b>Shuffle def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__SHUFFLE_DEF = ALGORITHM_FEATURE_COUNT + 18;

  /**
   * The feature id for the '<em><b>Shuffle</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__SHUFFLE = ALGORITHM_FEATURE_COUNT + 19;

  /**
   * The feature id for the '<em><b>Random state def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__RANDOM_STATE_DEF = ALGORITHM_FEATURE_COUNT + 20;

  /**
   * The feature id for the '<em><b>Random state</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__RANDOM_STATE = ALGORITHM_FEATURE_COUNT + 21;

  /**
   * The feature id for the '<em><b>Tolerance def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__TOLERANCE_DEF = ALGORITHM_FEATURE_COUNT + 22;

  /**
   * The feature id for the '<em><b>Tolerance</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__TOLERANCE = ALGORITHM_FEATURE_COUNT + 23;

  /**
   * The feature id for the '<em><b>Verbose def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__VERBOSE_DEF = ALGORITHM_FEATURE_COUNT + 24;

  /**
   * The feature id for the '<em><b>Verbose</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__VERBOSE = ALGORITHM_FEATURE_COUNT + 25;

  /**
   * The feature id for the '<em><b>Warm start def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__WARM_START_DEF = ALGORITHM_FEATURE_COUNT + 26;

  /**
   * The feature id for the '<em><b>Warm start</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__WARM_START = ALGORITHM_FEATURE_COUNT + 27;

  /**
   * The feature id for the '<em><b>Momentum def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__MOMENTUM_DEF = ALGORITHM_FEATURE_COUNT + 28;

  /**
   * The feature id for the '<em><b>Momentum</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__MOMENTUM = ALGORITHM_FEATURE_COUNT + 29;

  /**
   * The feature id for the '<em><b>Nesterovs momentum def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__NESTEROVS_MOMENTUM_DEF = ALGORITHM_FEATURE_COUNT + 30;

  /**
   * The feature id for the '<em><b>Nesterovs momentum</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__NESTEROVS_MOMENTUM = ALGORITHM_FEATURE_COUNT + 31;

  /**
   * The feature id for the '<em><b>Early stopping def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__EARLY_STOPPING_DEF = ALGORITHM_FEATURE_COUNT + 32;

  /**
   * The feature id for the '<em><b>Early stopping</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__EARLY_STOPPING = ALGORITHM_FEATURE_COUNT + 33;

  /**
   * The feature id for the '<em><b>Validation fraction def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__VALIDATION_FRACTION_DEF = ALGORITHM_FEATURE_COUNT + 34;

  /**
   * The feature id for the '<em><b>Validation fraction</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__VALIDATION_FRACTION = ALGORITHM_FEATURE_COUNT + 35;

  /**
   * The feature id for the '<em><b>Beta 1def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__BETA_1DEF = ALGORITHM_FEATURE_COUNT + 36;

  /**
   * The feature id for the '<em><b>Beta 1</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__BETA_1 = ALGORITHM_FEATURE_COUNT + 37;

  /**
   * The feature id for the '<em><b>Beta 2def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__BETA_2DEF = ALGORITHM_FEATURE_COUNT + 38;

  /**
   * The feature id for the '<em><b>Beta 2</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__BETA_2 = ALGORITHM_FEATURE_COUNT + 39;

  /**
   * The feature id for the '<em><b>Epsilon def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__EPSILON_DEF = ALGORITHM_FEATURE_COUNT + 40;

  /**
   * The feature id for the '<em><b>Epsilon</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__EPSILON = ALGORITHM_FEATURE_COUNT + 41;

  /**
   * The feature id for the '<em><b>Niter no change def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__NITER_NO_CHANGE_DEF = ALGORITHM_FEATURE_COUNT + 42;

  /**
   * The feature id for the '<em><b>Niter no change</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__NITER_NO_CHANGE = ALGORITHM_FEATURE_COUNT + 43;

  /**
   * The feature id for the '<em><b>Max fun def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__MAX_FUN_DEF = ALGORITHM_FEATURE_COUNT + 44;

  /**
   * The feature id for the '<em><b>Max fun</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER__MAX_FUN = ALGORITHM_FEATURE_COUNT + 45;

  /**
   * The number of structural features of the '<em>MLP Classifier</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MLP_CLASSIFIER_FEATURE_COUNT = ALGORITHM_FEATURE_COUNT + 46;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.SVCImpl <em>SVC</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.SVCImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getSVC()
   * @generated
   */
  int SVC = 6;

  /**
   * The feature id for the '<em><b>Cdef</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__CDEF = ALGORITHM_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>C</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__C = ALGORITHM_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Kernel def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__KERNEL_DEF = ALGORITHM_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>Kernel</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__KERNEL = ALGORITHM_FEATURE_COUNT + 3;

  /**
   * The feature id for the '<em><b>Degree def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__DEGREE_DEF = ALGORITHM_FEATURE_COUNT + 4;

  /**
   * The feature id for the '<em><b>Degree</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__DEGREE = ALGORITHM_FEATURE_COUNT + 5;

  /**
   * The feature id for the '<em><b>Gamma def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__GAMMA_DEF = ALGORITHM_FEATURE_COUNT + 6;

  /**
   * The feature id for the '<em><b>Gamma</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__GAMMA = ALGORITHM_FEATURE_COUNT + 7;

  /**
   * The feature id for the '<em><b>Coef0 def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__COEF0_DEF = ALGORITHM_FEATURE_COUNT + 8;

  /**
   * The feature id for the '<em><b>Coef0</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__COEF0 = ALGORITHM_FEATURE_COUNT + 9;

  /**
   * The feature id for the '<em><b>Shrinking def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__SHRINKING_DEF = ALGORITHM_FEATURE_COUNT + 10;

  /**
   * The feature id for the '<em><b>Shrinking</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__SHRINKING = ALGORITHM_FEATURE_COUNT + 11;

  /**
   * The feature id for the '<em><b>Probability def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__PROBABILITY_DEF = ALGORITHM_FEATURE_COUNT + 12;

  /**
   * The feature id for the '<em><b>Probability</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__PROBABILITY = ALGORITHM_FEATURE_COUNT + 13;

  /**
   * The feature id for the '<em><b>Tol def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__TOL_DEF = ALGORITHM_FEATURE_COUNT + 14;

  /**
   * The feature id for the '<em><b>Tol</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__TOL = ALGORITHM_FEATURE_COUNT + 15;

  /**
   * The feature id for the '<em><b>Cache size def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__CACHE_SIZE_DEF = ALGORITHM_FEATURE_COUNT + 16;

  /**
   * The feature id for the '<em><b>Cache size</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__CACHE_SIZE = ALGORITHM_FEATURE_COUNT + 17;

  /**
   * The feature id for the '<em><b>Verbose def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__VERBOSE_DEF = ALGORITHM_FEATURE_COUNT + 18;

  /**
   * The feature id for the '<em><b>Verbose</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__VERBOSE = ALGORITHM_FEATURE_COUNT + 19;

  /**
   * The feature id for the '<em><b>Max iter def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__MAX_ITER_DEF = ALGORITHM_FEATURE_COUNT + 20;

  /**
   * The feature id for the '<em><b>Max iter</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__MAX_ITER = ALGORITHM_FEATURE_COUNT + 21;

  /**
   * The feature id for the '<em><b>Decision function shape def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__DECISION_FUNCTION_SHAPE_DEF = ALGORITHM_FEATURE_COUNT + 22;

  /**
   * The feature id for the '<em><b>Decision function shape</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__DECISION_FUNCTION_SHAPE = ALGORITHM_FEATURE_COUNT + 23;

  /**
   * The feature id for the '<em><b>Break ties def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__BREAK_TIES_DEF = ALGORITHM_FEATURE_COUNT + 24;

  /**
   * The feature id for the '<em><b>Break ties</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__BREAK_TIES = ALGORITHM_FEATURE_COUNT + 25;

  /**
   * The feature id for the '<em><b>Random state def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__RANDOM_STATE_DEF = ALGORITHM_FEATURE_COUNT + 26;

  /**
   * The feature id for the '<em><b>Random state</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC__RANDOM_STATE = ALGORITHM_FEATURE_COUNT + 27;

  /**
   * The number of structural features of the '<em>SVC</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SVC_FEATURE_COUNT = ALGORITHM_FEATURE_COUNT + 28;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.KNeighborsClassifierImpl <em>KNeighbors Classifier</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.KNeighborsClassifierImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getKNeighborsClassifier()
   * @generated
   */
  int KNEIGHBORS_CLASSIFIER = 7;

  /**
   * The feature id for the '<em><b>Nneighbors def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__NNEIGHBORS_DEF = ALGORITHM_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Nneighbors</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__NNEIGHBORS = ALGORITHM_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Weights def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__WEIGHTS_DEF = ALGORITHM_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>Weights</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__WEIGHTS = ALGORITHM_FEATURE_COUNT + 3;

  /**
   * The feature id for the '<em><b>Algorithm def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__ALGORITHM_DEF = ALGORITHM_FEATURE_COUNT + 4;

  /**
   * The feature id for the '<em><b>Algorithm</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__ALGORITHM = ALGORITHM_FEATURE_COUNT + 5;

  /**
   * The feature id for the '<em><b>Leaf size def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__LEAF_SIZE_DEF = ALGORITHM_FEATURE_COUNT + 6;

  /**
   * The feature id for the '<em><b>Leaf size</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__LEAF_SIZE = ALGORITHM_FEATURE_COUNT + 7;

  /**
   * The feature id for the '<em><b>Pdef</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__PDEF = ALGORITHM_FEATURE_COUNT + 8;

  /**
   * The feature id for the '<em><b>P</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__P = ALGORITHM_FEATURE_COUNT + 9;

  /**
   * The feature id for the '<em><b>Metric def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__METRIC_DEF = ALGORITHM_FEATURE_COUNT + 10;

  /**
   * The feature id for the '<em><b>Metric</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__METRIC = ALGORITHM_FEATURE_COUNT + 11;

  /**
   * The feature id for the '<em><b>Njobs def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__NJOBS_DEF = ALGORITHM_FEATURE_COUNT + 12;

  /**
   * The feature id for the '<em><b>Njobs</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER__NJOBS = ALGORITHM_FEATURE_COUNT + 13;

  /**
   * The number of structural features of the '<em>KNeighbors Classifier</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int KNEIGHBORS_CLASSIFIER_FEATURE_COUNT = ALGORITHM_FEATURE_COUNT + 14;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.TrainingAmountImpl <em>Training Amount</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.TrainingAmountImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getTrainingAmount()
   * @generated
   */
  int TRAINING_AMOUNT = 8;

  /**
   * The feature id for the '<em><b>Value</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TRAINING_AMOUNT__VALUE = 0;

  /**
   * The feature id for the '<em><b>Percent</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TRAINING_AMOUNT__PERCENT = 1;

  /**
   * The number of structural features of the '<em>Training Amount</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TRAINING_AMOUNT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.ColumnDeclarationsImpl <em>Column Declarations</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.ColumnDeclarationsImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getColumnDeclarations()
   * @generated
   */
  int COLUMN_DECLARATIONS = 9;

  /**
   * The feature id for the '<em><b>Target</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_DECLARATIONS__TARGET = 0;

  /**
   * The feature id for the '<em><b>Target def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_DECLARATIONS__TARGET_DEF = 1;

  /**
   * The feature id for the '<em><b>Predictive</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_DECLARATIONS__PREDICTIVE = 2;

  /**
   * The feature id for the '<em><b>Pred def</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_DECLARATIONS__PRED_DEF = 3;

  /**
   * The number of structural features of the '<em>Column Declarations</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_DECLARATIONS_FEATURE_COUNT = 4;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.ColumnSetImpl <em>Column Set</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.ColumnSetImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getColumnSet()
   * @generated
   */
  int COLUMN_SET = 10;

  /**
   * The feature id for the '<em><b>Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__OP = 0;

  /**
   * The feature id for the '<em><b>Arg Bin1</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__ARG_BIN1 = 1;

  /**
   * The feature id for the '<em><b>Op Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__OP_TYPE = 2;

  /**
   * The feature id for the '<em><b>Arg Bin2</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__ARG_BIN2 = 3;

  /**
   * The feature id for the '<em><b>Range</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__RANGE = 4;

  /**
   * The feature id for the '<em><b>Arg R1</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__ARG_R1 = 5;

  /**
   * The feature id for the '<em><b>Arg R2</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__ARG_R2 = 6;

  /**
   * The feature id for the '<em><b>List</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__LIST = 7;

  /**
   * The feature id for the '<em><b>Arg List</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET__ARG_LIST = 8;

  /**
   * The number of structural features of the '<em>Column Set</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COLUMN_SET_FEATURE_COUNT = 9;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.BinopImpl <em>Binop</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.BinopImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getBinop()
   * @generated
   */
  int BINOP = 11;

  /**
   * The feature id for the '<em><b>Type</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BINOP__TYPE = 0;

  /**
   * The number of structural features of the '<em>Binop</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BINOP_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.FLOATImpl <em>FLOAT</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.FLOATImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getFLOAT()
   * @generated
   */
  int FLOAT = 12;

  /**
   * The feature id for the '<em><b>Int Part</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FLOAT__INT_PART = 0;

  /**
   * The feature id for the '<em><b>Dec Part</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FLOAT__DEC_PART = 1;

  /**
   * The number of structural features of the '<em>FLOAT</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FLOAT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.example.perfectML.perfectML.impl.BOOLImpl <em>BOOL</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.perfectML.perfectML.impl.BOOLImpl
   * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getBOOL()
   * @generated
   */
  int BOOL = 13;

  /**
   * The feature id for the '<em><b>Value</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BOOL__VALUE = 0;

  /**
   * The number of structural features of the '<em>BOOL</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BOOL_FEATURE_COUNT = 1;


  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.PerfectMLFile <em>File</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>File</em>'.
   * @see org.xtext.example.perfectML.perfectML.PerfectMLFile
   * @generated
   */
  EClass getPerfectMLFile();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.perfectML.perfectML.PerfectMLFile#getPrograms <em>Programs</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Programs</em>'.
   * @see org.xtext.example.perfectML.perfectML.PerfectMLFile#getPrograms()
   * @see #getPerfectMLFile()
   * @generated
   */
  EReference getPerfectMLFile_Programs();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Program</em>'.
   * @see org.xtext.example.perfectML.perfectML.Program
   * @generated
   */
  EClass getProgram();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.Program#getInput <em>Input</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Input</em>'.
   * @see org.xtext.example.perfectML.perfectML.Program#getInput()
   * @see #getProgram()
   * @generated
   */
  EReference getProgram_Input();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.Program#getOutput <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Output</em>'.
   * @see org.xtext.example.perfectML.perfectML.Program#getOutput()
   * @see #getProgram()
   * @generated
   */
  EReference getProgram_Output();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.Program#getAlgo <em>Algo</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Algo</em>'.
   * @see org.xtext.example.perfectML.perfectML.Program#getAlgo()
   * @see #getProgram()
   * @generated
   */
  EReference getProgram_Algo();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.Program#getNbtraining <em>Nbtraining</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Nbtraining</em>'.
   * @see org.xtext.example.perfectML.perfectML.Program#getNbtraining()
   * @see #getProgram()
   * @generated
   */
  EReference getProgram_Nbtraining();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.Program#getColumn <em>Column</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Column</em>'.
   * @see org.xtext.example.perfectML.perfectML.Program#getColumn()
   * @see #getProgram()
   * @generated
   */
  EReference getProgram_Column();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.Input <em>Input</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Input</em>'.
   * @see org.xtext.example.perfectML.perfectML.Input
   * @generated
   */
  EClass getInput();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.Input#getPATH <em>PATH</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>PATH</em>'.
   * @see org.xtext.example.perfectML.perfectML.Input#getPATH()
   * @see #getInput()
   * @generated
   */
  EAttribute getInput_PATH();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.Output <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Output</em>'.
   * @see org.xtext.example.perfectML.perfectML.Output
   * @generated
   */
  EClass getOutput();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.Output#getPATH <em>PATH</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>PATH</em>'.
   * @see org.xtext.example.perfectML.perfectML.Output#getPATH()
   * @see #getOutput()
   * @generated
   */
  EAttribute getOutput_PATH();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.Algorithm <em>Algorithm</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Algorithm</em>'.
   * @see org.xtext.example.perfectML.perfectML.Algorithm
   * @generated
   */
  EClass getAlgorithm();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.MLPClassifier <em>MLP Classifier</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>MLP Classifier</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier
   * @generated
   */
  EClass getMLPClassifier();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isHidden_layer_sizes_def <em>Hidden layer sizes def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Hidden layer sizes def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isHidden_layer_sizes_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Hidden_layer_sizes_def();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getHidden_layer_sizes <em>Hidden layer sizes</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Hidden layer sizes</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getHidden_layer_sizes()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Hidden_layer_sizes();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isActivation_def <em>Activation def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Activation def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isActivation_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Activation_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getActivation <em>Activation</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Activation</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getActivation()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Activation();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isSolver_def <em>Solver def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Solver def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isSolver_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Solver_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getSolver <em>Solver</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Solver</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getSolver()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Solver();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isAlpha_def <em>Alpha def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Alpha def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isAlpha_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Alpha_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getAlpha <em>Alpha</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Alpha</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getAlpha()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Alpha();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isBatch_size_def <em>Batch size def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Batch size def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isBatch_size_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Batch_size_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getBatch_size <em>Batch size</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Batch size</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getBatch_size()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Batch_size();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isLearning_rate_def <em>Learning rate def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Learning rate def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isLearning_rate_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Learning_rate_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getLearning_rate <em>Learning rate</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Learning rate</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getLearning_rate()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Learning_rate();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isLearning_rate_init_def <em>Learning rate init def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Learning rate init def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isLearning_rate_init_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Learning_rate_init_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getLearning_rate_init <em>Learning rate init</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Learning rate init</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getLearning_rate_init()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Learning_rate_init();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isPower_t_def <em>Power tdef</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Power tdef</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isPower_t_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Power_t_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getPower_t <em>Power t</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Power t</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getPower_t()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Power_t();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isMax_iteer_def <em>Max iteer def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Max iteer def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isMax_iteer_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Max_iteer_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getMax_iter <em>Max iter</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Max iter</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getMax_iter()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Max_iter();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isShuffle_def <em>Shuffle def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Shuffle def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isShuffle_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Shuffle_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getShuffle <em>Shuffle</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Shuffle</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getShuffle()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Shuffle();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isRandom_state_def <em>Random state def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Random state def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isRandom_state_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Random_state_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getRandom_state <em>Random state</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Random state</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getRandom_state()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Random_state();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isTolerance_def <em>Tolerance def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Tolerance def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isTolerance_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Tolerance_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getTolerance <em>Tolerance</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Tolerance</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getTolerance()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Tolerance();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isVerbose_def <em>Verbose def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Verbose def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isVerbose_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Verbose_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getVerbose <em>Verbose</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Verbose</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getVerbose()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Verbose();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isWarm_start_def <em>Warm start def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Warm start def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isWarm_start_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Warm_start_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getWarm_start <em>Warm start</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Warm start</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getWarm_start()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Warm_start();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isMomentum_def <em>Momentum def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Momentum def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isMomentum_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Momentum_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getMomentum <em>Momentum</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Momentum</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getMomentum()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Momentum();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isNesterovs_momentum_def <em>Nesterovs momentum def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Nesterovs momentum def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isNesterovs_momentum_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Nesterovs_momentum_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getNesterovs_momentum <em>Nesterovs momentum</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Nesterovs momentum</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getNesterovs_momentum()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Nesterovs_momentum();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isEarly_stopping_def <em>Early stopping def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Early stopping def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isEarly_stopping_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Early_stopping_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getEarly_stopping <em>Early stopping</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Early stopping</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getEarly_stopping()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Early_stopping();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isValidation_fraction_def <em>Validation fraction def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Validation fraction def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isValidation_fraction_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Validation_fraction_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getValidation_fraction <em>Validation fraction</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Validation fraction</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getValidation_fraction()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Validation_fraction();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isBeta_1_def <em>Beta 1def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Beta 1def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isBeta_1_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Beta_1_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getBeta_1 <em>Beta 1</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Beta 1</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getBeta_1()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Beta_1();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isBeta_2_def <em>Beta 2def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Beta 2def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isBeta_2_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Beta_2_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getBeta_2 <em>Beta 2</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Beta 2</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getBeta_2()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Beta_2();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isEpsilon_def <em>Epsilon def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Epsilon def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isEpsilon_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Epsilon_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getEpsilon <em>Epsilon</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Epsilon</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getEpsilon()
   * @see #getMLPClassifier()
   * @generated
   */
  EReference getMLPClassifier_Epsilon();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isN_iter_no_change_def <em>Niter no change def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Niter no change def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isN_iter_no_change_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_N_iter_no_change_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getN_iter_no_change <em>Niter no change</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Niter no change</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getN_iter_no_change()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_N_iter_no_change();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#isMax_fun_def <em>Max fun def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Max fun def</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#isMax_fun_def()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Max_fun_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.MLPClassifier#getMax_fun <em>Max fun</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Max fun</em>'.
   * @see org.xtext.example.perfectML.perfectML.MLPClassifier#getMax_fun()
   * @see #getMLPClassifier()
   * @generated
   */
  EAttribute getMLPClassifier_Max_fun();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.SVC <em>SVC</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>SVC</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC
   * @generated
   */
  EClass getSVC();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isC_def <em>Cdef</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Cdef</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isC_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_C_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.SVC#getC <em>C</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>C</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getC()
   * @see #getSVC()
   * @generated
   */
  EReference getSVC_C();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isKernel_def <em>Kernel def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Kernel def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isKernel_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Kernel_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#getKernel <em>Kernel</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Kernel</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getKernel()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Kernel();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isDegree_def <em>Degree def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Degree def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isDegree_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Degree_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#getDegree <em>Degree</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Degree</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getDegree()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Degree();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isGamma_def <em>Gamma def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Gamma def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isGamma_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Gamma_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#getGamma <em>Gamma</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Gamma</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getGamma()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Gamma();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isCoef0_def <em>Coef0 def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Coef0 def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isCoef0_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Coef0_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.SVC#getCoef0 <em>Coef0</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Coef0</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getCoef0()
   * @see #getSVC()
   * @generated
   */
  EReference getSVC_Coef0();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isShrinking_def <em>Shrinking def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Shrinking def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isShrinking_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Shrinking_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.SVC#getShrinking <em>Shrinking</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Shrinking</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getShrinking()
   * @see #getSVC()
   * @generated
   */
  EReference getSVC_Shrinking();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isProbability_def <em>Probability def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Probability def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isProbability_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Probability_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.SVC#getProbability <em>Probability</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Probability</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getProbability()
   * @see #getSVC()
   * @generated
   */
  EReference getSVC_Probability();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isTol_def <em>Tol def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Tol def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isTol_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Tol_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.SVC#getTol <em>Tol</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Tol</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getTol()
   * @see #getSVC()
   * @generated
   */
  EReference getSVC_Tol();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isCache_size_def <em>Cache size def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Cache size def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isCache_size_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Cache_size_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.SVC#getCache_size <em>Cache size</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Cache size</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getCache_size()
   * @see #getSVC()
   * @generated
   */
  EReference getSVC_Cache_size();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isVerbose_def <em>Verbose def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Verbose def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isVerbose_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Verbose_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.SVC#getVerbose <em>Verbose</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Verbose</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getVerbose()
   * @see #getSVC()
   * @generated
   */
  EReference getSVC_Verbose();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isMax_iter_def <em>Max iter def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Max iter def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isMax_iter_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Max_iter_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#getMax_iter <em>Max iter</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Max iter</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getMax_iter()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Max_iter();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isDecision_function_shape_def <em>Decision function shape def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Decision function shape def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isDecision_function_shape_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Decision_function_shape_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#getDecision_function_shape <em>Decision function shape</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Decision function shape</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getDecision_function_shape()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Decision_function_shape();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isBreak_ties_def <em>Break ties def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Break ties def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isBreak_ties_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Break_ties_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.SVC#getBreak_ties <em>Break ties</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Break ties</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getBreak_ties()
   * @see #getSVC()
   * @generated
   */
  EReference getSVC_Break_ties();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#isRandom_state_def <em>Random state def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Random state def</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#isRandom_state_def()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Random_state_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.SVC#getRandom_state <em>Random state</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Random state</em>'.
   * @see org.xtext.example.perfectML.perfectML.SVC#getRandom_state()
   * @see #getSVC()
   * @generated
   */
  EAttribute getSVC_Random_state();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier <em>KNeighbors Classifier</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>KNeighbors Classifier</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier
   * @generated
   */
  EClass getKNeighborsClassifier();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isN_neighbors_def <em>Nneighbors def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Nneighbors def</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isN_neighbors_def()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_N_neighbors_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getN_neighbors <em>Nneighbors</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Nneighbors</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getN_neighbors()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_N_neighbors();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isWeights_def <em>Weights def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Weights def</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isWeights_def()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_Weights_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getWeights <em>Weights</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Weights</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getWeights()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_Weights();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isAlgorithm_def <em>Algorithm def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Algorithm def</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isAlgorithm_def()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_Algorithm_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getAlgorithm <em>Algorithm</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Algorithm</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getAlgorithm()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_Algorithm();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isLeaf_size_def <em>Leaf size def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Leaf size def</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isLeaf_size_def()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_Leaf_size_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getLeaf_size <em>Leaf size</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Leaf size</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getLeaf_size()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_Leaf_size();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isP_def <em>Pdef</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Pdef</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isP_def()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_P_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getP <em>P</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>P</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getP()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_P();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isMetric_def <em>Metric def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Metric def</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isMetric_def()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_Metric_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getMetric <em>Metric</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Metric</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getMetric()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_Metric();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isN_jobs_def <em>Njobs def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Njobs def</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#isN_jobs_def()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_N_jobs_def();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getN_jobs <em>Njobs</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Njobs</em>'.
   * @see org.xtext.example.perfectML.perfectML.KNeighborsClassifier#getN_jobs()
   * @see #getKNeighborsClassifier()
   * @generated
   */
  EAttribute getKNeighborsClassifier_N_jobs();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.TrainingAmount <em>Training Amount</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Training Amount</em>'.
   * @see org.xtext.example.perfectML.perfectML.TrainingAmount
   * @generated
   */
  EClass getTrainingAmount();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.TrainingAmount#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Value</em>'.
   * @see org.xtext.example.perfectML.perfectML.TrainingAmount#getValue()
   * @see #getTrainingAmount()
   * @generated
   */
  EAttribute getTrainingAmount_Value();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.TrainingAmount#isPercent <em>Percent</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Percent</em>'.
   * @see org.xtext.example.perfectML.perfectML.TrainingAmount#isPercent()
   * @see #getTrainingAmount()
   * @generated
   */
  EAttribute getTrainingAmount_Percent();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.ColumnDeclarations <em>Column Declarations</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Column Declarations</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnDeclarations
   * @generated
   */
  EClass getColumnDeclarations();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.ColumnDeclarations#getTarget <em>Target</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Target</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnDeclarations#getTarget()
   * @see #getColumnDeclarations()
   * @generated
   */
  EReference getColumnDeclarations_Target();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.ColumnDeclarations#isTarget_def <em>Target def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Target def</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnDeclarations#isTarget_def()
   * @see #getColumnDeclarations()
   * @generated
   */
  EAttribute getColumnDeclarations_Target_def();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.ColumnDeclarations#getPredictive <em>Predictive</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Predictive</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnDeclarations#getPredictive()
   * @see #getColumnDeclarations()
   * @generated
   */
  EReference getColumnDeclarations_Predictive();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.ColumnDeclarations#isPred_def <em>Pred def</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Pred def</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnDeclarations#isPred_def()
   * @see #getColumnDeclarations()
   * @generated
   */
  EAttribute getColumnDeclarations_Pred_def();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.ColumnSet <em>Column Set</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Column Set</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet
   * @generated
   */
  EClass getColumnSet();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.ColumnSet#isOp <em>Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Op</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#isOp()
   * @see #getColumnSet()
   * @generated
   */
  EAttribute getColumnSet_Op();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.ColumnSet#getArgBin1 <em>Arg Bin1</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Arg Bin1</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#getArgBin1()
   * @see #getColumnSet()
   * @generated
   */
  EReference getColumnSet_ArgBin1();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.ColumnSet#getOpType <em>Op Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Op Type</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#getOpType()
   * @see #getColumnSet()
   * @generated
   */
  EReference getColumnSet_OpType();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.example.perfectML.perfectML.ColumnSet#getArgBin2 <em>Arg Bin2</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Arg Bin2</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#getArgBin2()
   * @see #getColumnSet()
   * @generated
   */
  EReference getColumnSet_ArgBin2();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.ColumnSet#isRange <em>Range</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Range</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#isRange()
   * @see #getColumnSet()
   * @generated
   */
  EAttribute getColumnSet_Range();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.ColumnSet#getArgR1 <em>Arg R1</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Arg R1</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#getArgR1()
   * @see #getColumnSet()
   * @generated
   */
  EAttribute getColumnSet_ArgR1();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.ColumnSet#getArgR2 <em>Arg R2</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Arg R2</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#getArgR2()
   * @see #getColumnSet()
   * @generated
   */
  EAttribute getColumnSet_ArgR2();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.ColumnSet#isList <em>List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>List</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#isList()
   * @see #getColumnSet()
   * @generated
   */
  EAttribute getColumnSet_List();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.example.perfectML.perfectML.ColumnSet#getArgList <em>Arg List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Arg List</em>'.
   * @see org.xtext.example.perfectML.perfectML.ColumnSet#getArgList()
   * @see #getColumnSet()
   * @generated
   */
  EAttribute getColumnSet_ArgList();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.Binop <em>Binop</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Binop</em>'.
   * @see org.xtext.example.perfectML.perfectML.Binop
   * @generated
   */
  EClass getBinop();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.Binop#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Type</em>'.
   * @see org.xtext.example.perfectML.perfectML.Binop#getType()
   * @see #getBinop()
   * @generated
   */
  EAttribute getBinop_Type();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.FLOAT <em>FLOAT</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>FLOAT</em>'.
   * @see org.xtext.example.perfectML.perfectML.FLOAT
   * @generated
   */
  EClass getFLOAT();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.FLOAT#getIntPart <em>Int Part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Int Part</em>'.
   * @see org.xtext.example.perfectML.perfectML.FLOAT#getIntPart()
   * @see #getFLOAT()
   * @generated
   */
  EAttribute getFLOAT_IntPart();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.FLOAT#getDecPart <em>Dec Part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Dec Part</em>'.
   * @see org.xtext.example.perfectML.perfectML.FLOAT#getDecPart()
   * @see #getFLOAT()
   * @generated
   */
  EAttribute getFLOAT_DecPart();

  /**
   * Returns the meta object for class '{@link org.xtext.example.perfectML.perfectML.BOOL <em>BOOL</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>BOOL</em>'.
   * @see org.xtext.example.perfectML.perfectML.BOOL
   * @generated
   */
  EClass getBOOL();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.perfectML.perfectML.BOOL#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Value</em>'.
   * @see org.xtext.example.perfectML.perfectML.BOOL#getValue()
   * @see #getBOOL()
   * @generated
   */
  EAttribute getBOOL_Value();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  PerfectMLFactory getPerfectMLFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.PerfectMLFileImpl <em>File</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLFileImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getPerfectMLFile()
     * @generated
     */
    EClass PERFECT_ML_FILE = eINSTANCE.getPerfectMLFile();

    /**
     * The meta object literal for the '<em><b>Programs</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PERFECT_ML_FILE__PROGRAMS = eINSTANCE.getPerfectMLFile_Programs();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.ProgramImpl <em>Program</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.ProgramImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getProgram()
     * @generated
     */
    EClass PROGRAM = eINSTANCE.getProgram();

    /**
     * The meta object literal for the '<em><b>Input</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__INPUT = eINSTANCE.getProgram_Input();

    /**
     * The meta object literal for the '<em><b>Output</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__OUTPUT = eINSTANCE.getProgram_Output();

    /**
     * The meta object literal for the '<em><b>Algo</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__ALGO = eINSTANCE.getProgram_Algo();

    /**
     * The meta object literal for the '<em><b>Nbtraining</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__NBTRAINING = eINSTANCE.getProgram_Nbtraining();

    /**
     * The meta object literal for the '<em><b>Column</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__COLUMN = eINSTANCE.getProgram_Column();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.InputImpl <em>Input</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.InputImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getInput()
     * @generated
     */
    EClass INPUT = eINSTANCE.getInput();

    /**
     * The meta object literal for the '<em><b>PATH</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute INPUT__PATH = eINSTANCE.getInput_PATH();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.OutputImpl <em>Output</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.OutputImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getOutput()
     * @generated
     */
    EClass OUTPUT = eINSTANCE.getOutput();

    /**
     * The meta object literal for the '<em><b>PATH</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute OUTPUT__PATH = eINSTANCE.getOutput_PATH();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.AlgorithmImpl <em>Algorithm</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.AlgorithmImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getAlgorithm()
     * @generated
     */
    EClass ALGORITHM = eINSTANCE.getAlgorithm();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl <em>MLP Classifier</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getMLPClassifier()
     * @generated
     */
    EClass MLP_CLASSIFIER = eINSTANCE.getMLPClassifier();

    /**
     * The meta object literal for the '<em><b>Hidden layer sizes def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__HIDDEN_LAYER_SIZES_DEF = eINSTANCE.getMLPClassifier_Hidden_layer_sizes_def();

    /**
     * The meta object literal for the '<em><b>Hidden layer sizes</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__HIDDEN_LAYER_SIZES = eINSTANCE.getMLPClassifier_Hidden_layer_sizes();

    /**
     * The meta object literal for the '<em><b>Activation def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__ACTIVATION_DEF = eINSTANCE.getMLPClassifier_Activation_def();

    /**
     * The meta object literal for the '<em><b>Activation</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__ACTIVATION = eINSTANCE.getMLPClassifier_Activation();

    /**
     * The meta object literal for the '<em><b>Solver def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__SOLVER_DEF = eINSTANCE.getMLPClassifier_Solver_def();

    /**
     * The meta object literal for the '<em><b>Solver</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__SOLVER = eINSTANCE.getMLPClassifier_Solver();

    /**
     * The meta object literal for the '<em><b>Alpha def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__ALPHA_DEF = eINSTANCE.getMLPClassifier_Alpha_def();

    /**
     * The meta object literal for the '<em><b>Alpha</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__ALPHA = eINSTANCE.getMLPClassifier_Alpha();

    /**
     * The meta object literal for the '<em><b>Batch size def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__BATCH_SIZE_DEF = eINSTANCE.getMLPClassifier_Batch_size_def();

    /**
     * The meta object literal for the '<em><b>Batch size</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__BATCH_SIZE = eINSTANCE.getMLPClassifier_Batch_size();

    /**
     * The meta object literal for the '<em><b>Learning rate def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__LEARNING_RATE_DEF = eINSTANCE.getMLPClassifier_Learning_rate_def();

    /**
     * The meta object literal for the '<em><b>Learning rate</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__LEARNING_RATE = eINSTANCE.getMLPClassifier_Learning_rate();

    /**
     * The meta object literal for the '<em><b>Learning rate init def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__LEARNING_RATE_INIT_DEF = eINSTANCE.getMLPClassifier_Learning_rate_init_def();

    /**
     * The meta object literal for the '<em><b>Learning rate init</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__LEARNING_RATE_INIT = eINSTANCE.getMLPClassifier_Learning_rate_init();

    /**
     * The meta object literal for the '<em><b>Power tdef</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__POWER_TDEF = eINSTANCE.getMLPClassifier_Power_t_def();

    /**
     * The meta object literal for the '<em><b>Power t</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__POWER_T = eINSTANCE.getMLPClassifier_Power_t();

    /**
     * The meta object literal for the '<em><b>Max iteer def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__MAX_ITEER_DEF = eINSTANCE.getMLPClassifier_Max_iteer_def();

    /**
     * The meta object literal for the '<em><b>Max iter</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__MAX_ITER = eINSTANCE.getMLPClassifier_Max_iter();

    /**
     * The meta object literal for the '<em><b>Shuffle def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__SHUFFLE_DEF = eINSTANCE.getMLPClassifier_Shuffle_def();

    /**
     * The meta object literal for the '<em><b>Shuffle</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__SHUFFLE = eINSTANCE.getMLPClassifier_Shuffle();

    /**
     * The meta object literal for the '<em><b>Random state def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__RANDOM_STATE_DEF = eINSTANCE.getMLPClassifier_Random_state_def();

    /**
     * The meta object literal for the '<em><b>Random state</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__RANDOM_STATE = eINSTANCE.getMLPClassifier_Random_state();

    /**
     * The meta object literal for the '<em><b>Tolerance def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__TOLERANCE_DEF = eINSTANCE.getMLPClassifier_Tolerance_def();

    /**
     * The meta object literal for the '<em><b>Tolerance</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__TOLERANCE = eINSTANCE.getMLPClassifier_Tolerance();

    /**
     * The meta object literal for the '<em><b>Verbose def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__VERBOSE_DEF = eINSTANCE.getMLPClassifier_Verbose_def();

    /**
     * The meta object literal for the '<em><b>Verbose</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__VERBOSE = eINSTANCE.getMLPClassifier_Verbose();

    /**
     * The meta object literal for the '<em><b>Warm start def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__WARM_START_DEF = eINSTANCE.getMLPClassifier_Warm_start_def();

    /**
     * The meta object literal for the '<em><b>Warm start</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__WARM_START = eINSTANCE.getMLPClassifier_Warm_start();

    /**
     * The meta object literal for the '<em><b>Momentum def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__MOMENTUM_DEF = eINSTANCE.getMLPClassifier_Momentum_def();

    /**
     * The meta object literal for the '<em><b>Momentum</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__MOMENTUM = eINSTANCE.getMLPClassifier_Momentum();

    /**
     * The meta object literal for the '<em><b>Nesterovs momentum def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__NESTEROVS_MOMENTUM_DEF = eINSTANCE.getMLPClassifier_Nesterovs_momentum_def();

    /**
     * The meta object literal for the '<em><b>Nesterovs momentum</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__NESTEROVS_MOMENTUM = eINSTANCE.getMLPClassifier_Nesterovs_momentum();

    /**
     * The meta object literal for the '<em><b>Early stopping def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__EARLY_STOPPING_DEF = eINSTANCE.getMLPClassifier_Early_stopping_def();

    /**
     * The meta object literal for the '<em><b>Early stopping</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__EARLY_STOPPING = eINSTANCE.getMLPClassifier_Early_stopping();

    /**
     * The meta object literal for the '<em><b>Validation fraction def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__VALIDATION_FRACTION_DEF = eINSTANCE.getMLPClassifier_Validation_fraction_def();

    /**
     * The meta object literal for the '<em><b>Validation fraction</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__VALIDATION_FRACTION = eINSTANCE.getMLPClassifier_Validation_fraction();

    /**
     * The meta object literal for the '<em><b>Beta 1def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__BETA_1DEF = eINSTANCE.getMLPClassifier_Beta_1_def();

    /**
     * The meta object literal for the '<em><b>Beta 1</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__BETA_1 = eINSTANCE.getMLPClassifier_Beta_1();

    /**
     * The meta object literal for the '<em><b>Beta 2def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__BETA_2DEF = eINSTANCE.getMLPClassifier_Beta_2_def();

    /**
     * The meta object literal for the '<em><b>Beta 2</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__BETA_2 = eINSTANCE.getMLPClassifier_Beta_2();

    /**
     * The meta object literal for the '<em><b>Epsilon def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__EPSILON_DEF = eINSTANCE.getMLPClassifier_Epsilon_def();

    /**
     * The meta object literal for the '<em><b>Epsilon</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MLP_CLASSIFIER__EPSILON = eINSTANCE.getMLPClassifier_Epsilon();

    /**
     * The meta object literal for the '<em><b>Niter no change def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__NITER_NO_CHANGE_DEF = eINSTANCE.getMLPClassifier_N_iter_no_change_def();

    /**
     * The meta object literal for the '<em><b>Niter no change</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__NITER_NO_CHANGE = eINSTANCE.getMLPClassifier_N_iter_no_change();

    /**
     * The meta object literal for the '<em><b>Max fun def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__MAX_FUN_DEF = eINSTANCE.getMLPClassifier_Max_fun_def();

    /**
     * The meta object literal for the '<em><b>Max fun</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MLP_CLASSIFIER__MAX_FUN = eINSTANCE.getMLPClassifier_Max_fun();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.SVCImpl <em>SVC</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.SVCImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getSVC()
     * @generated
     */
    EClass SVC = eINSTANCE.getSVC();

    /**
     * The meta object literal for the '<em><b>Cdef</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__CDEF = eINSTANCE.getSVC_C_def();

    /**
     * The meta object literal for the '<em><b>C</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SVC__C = eINSTANCE.getSVC_C();

    /**
     * The meta object literal for the '<em><b>Kernel def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__KERNEL_DEF = eINSTANCE.getSVC_Kernel_def();

    /**
     * The meta object literal for the '<em><b>Kernel</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__KERNEL = eINSTANCE.getSVC_Kernel();

    /**
     * The meta object literal for the '<em><b>Degree def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__DEGREE_DEF = eINSTANCE.getSVC_Degree_def();

    /**
     * The meta object literal for the '<em><b>Degree</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__DEGREE = eINSTANCE.getSVC_Degree();

    /**
     * The meta object literal for the '<em><b>Gamma def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__GAMMA_DEF = eINSTANCE.getSVC_Gamma_def();

    /**
     * The meta object literal for the '<em><b>Gamma</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__GAMMA = eINSTANCE.getSVC_Gamma();

    /**
     * The meta object literal for the '<em><b>Coef0 def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__COEF0_DEF = eINSTANCE.getSVC_Coef0_def();

    /**
     * The meta object literal for the '<em><b>Coef0</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SVC__COEF0 = eINSTANCE.getSVC_Coef0();

    /**
     * The meta object literal for the '<em><b>Shrinking def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__SHRINKING_DEF = eINSTANCE.getSVC_Shrinking_def();

    /**
     * The meta object literal for the '<em><b>Shrinking</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SVC__SHRINKING = eINSTANCE.getSVC_Shrinking();

    /**
     * The meta object literal for the '<em><b>Probability def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__PROBABILITY_DEF = eINSTANCE.getSVC_Probability_def();

    /**
     * The meta object literal for the '<em><b>Probability</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SVC__PROBABILITY = eINSTANCE.getSVC_Probability();

    /**
     * The meta object literal for the '<em><b>Tol def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__TOL_DEF = eINSTANCE.getSVC_Tol_def();

    /**
     * The meta object literal for the '<em><b>Tol</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SVC__TOL = eINSTANCE.getSVC_Tol();

    /**
     * The meta object literal for the '<em><b>Cache size def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__CACHE_SIZE_DEF = eINSTANCE.getSVC_Cache_size_def();

    /**
     * The meta object literal for the '<em><b>Cache size</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SVC__CACHE_SIZE = eINSTANCE.getSVC_Cache_size();

    /**
     * The meta object literal for the '<em><b>Verbose def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__VERBOSE_DEF = eINSTANCE.getSVC_Verbose_def();

    /**
     * The meta object literal for the '<em><b>Verbose</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SVC__VERBOSE = eINSTANCE.getSVC_Verbose();

    /**
     * The meta object literal for the '<em><b>Max iter def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__MAX_ITER_DEF = eINSTANCE.getSVC_Max_iter_def();

    /**
     * The meta object literal for the '<em><b>Max iter</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__MAX_ITER = eINSTANCE.getSVC_Max_iter();

    /**
     * The meta object literal for the '<em><b>Decision function shape def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__DECISION_FUNCTION_SHAPE_DEF = eINSTANCE.getSVC_Decision_function_shape_def();

    /**
     * The meta object literal for the '<em><b>Decision function shape</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__DECISION_FUNCTION_SHAPE = eINSTANCE.getSVC_Decision_function_shape();

    /**
     * The meta object literal for the '<em><b>Break ties def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__BREAK_TIES_DEF = eINSTANCE.getSVC_Break_ties_def();

    /**
     * The meta object literal for the '<em><b>Break ties</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SVC__BREAK_TIES = eINSTANCE.getSVC_Break_ties();

    /**
     * The meta object literal for the '<em><b>Random state def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__RANDOM_STATE_DEF = eINSTANCE.getSVC_Random_state_def();

    /**
     * The meta object literal for the '<em><b>Random state</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SVC__RANDOM_STATE = eINSTANCE.getSVC_Random_state();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.KNeighborsClassifierImpl <em>KNeighbors Classifier</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.KNeighborsClassifierImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getKNeighborsClassifier()
     * @generated
     */
    EClass KNEIGHBORS_CLASSIFIER = eINSTANCE.getKNeighborsClassifier();

    /**
     * The meta object literal for the '<em><b>Nneighbors def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__NNEIGHBORS_DEF = eINSTANCE.getKNeighborsClassifier_N_neighbors_def();

    /**
     * The meta object literal for the '<em><b>Nneighbors</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__NNEIGHBORS = eINSTANCE.getKNeighborsClassifier_N_neighbors();

    /**
     * The meta object literal for the '<em><b>Weights def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__WEIGHTS_DEF = eINSTANCE.getKNeighborsClassifier_Weights_def();

    /**
     * The meta object literal for the '<em><b>Weights</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__WEIGHTS = eINSTANCE.getKNeighborsClassifier_Weights();

    /**
     * The meta object literal for the '<em><b>Algorithm def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__ALGORITHM_DEF = eINSTANCE.getKNeighborsClassifier_Algorithm_def();

    /**
     * The meta object literal for the '<em><b>Algorithm</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__ALGORITHM = eINSTANCE.getKNeighborsClassifier_Algorithm();

    /**
     * The meta object literal for the '<em><b>Leaf size def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__LEAF_SIZE_DEF = eINSTANCE.getKNeighborsClassifier_Leaf_size_def();

    /**
     * The meta object literal for the '<em><b>Leaf size</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__LEAF_SIZE = eINSTANCE.getKNeighborsClassifier_Leaf_size();

    /**
     * The meta object literal for the '<em><b>Pdef</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__PDEF = eINSTANCE.getKNeighborsClassifier_P_def();

    /**
     * The meta object literal for the '<em><b>P</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__P = eINSTANCE.getKNeighborsClassifier_P();

    /**
     * The meta object literal for the '<em><b>Metric def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__METRIC_DEF = eINSTANCE.getKNeighborsClassifier_Metric_def();

    /**
     * The meta object literal for the '<em><b>Metric</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__METRIC = eINSTANCE.getKNeighborsClassifier_Metric();

    /**
     * The meta object literal for the '<em><b>Njobs def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__NJOBS_DEF = eINSTANCE.getKNeighborsClassifier_N_jobs_def();

    /**
     * The meta object literal for the '<em><b>Njobs</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute KNEIGHBORS_CLASSIFIER__NJOBS = eINSTANCE.getKNeighborsClassifier_N_jobs();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.TrainingAmountImpl <em>Training Amount</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.TrainingAmountImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getTrainingAmount()
     * @generated
     */
    EClass TRAINING_AMOUNT = eINSTANCE.getTrainingAmount();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TRAINING_AMOUNT__VALUE = eINSTANCE.getTrainingAmount_Value();

    /**
     * The meta object literal for the '<em><b>Percent</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TRAINING_AMOUNT__PERCENT = eINSTANCE.getTrainingAmount_Percent();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.ColumnDeclarationsImpl <em>Column Declarations</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.ColumnDeclarationsImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getColumnDeclarations()
     * @generated
     */
    EClass COLUMN_DECLARATIONS = eINSTANCE.getColumnDeclarations();

    /**
     * The meta object literal for the '<em><b>Target</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COLUMN_DECLARATIONS__TARGET = eINSTANCE.getColumnDeclarations_Target();

    /**
     * The meta object literal for the '<em><b>Target def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COLUMN_DECLARATIONS__TARGET_DEF = eINSTANCE.getColumnDeclarations_Target_def();

    /**
     * The meta object literal for the '<em><b>Predictive</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COLUMN_DECLARATIONS__PREDICTIVE = eINSTANCE.getColumnDeclarations_Predictive();

    /**
     * The meta object literal for the '<em><b>Pred def</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COLUMN_DECLARATIONS__PRED_DEF = eINSTANCE.getColumnDeclarations_Pred_def();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.ColumnSetImpl <em>Column Set</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.ColumnSetImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getColumnSet()
     * @generated
     */
    EClass COLUMN_SET = eINSTANCE.getColumnSet();

    /**
     * The meta object literal for the '<em><b>Op</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COLUMN_SET__OP = eINSTANCE.getColumnSet_Op();

    /**
     * The meta object literal for the '<em><b>Arg Bin1</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COLUMN_SET__ARG_BIN1 = eINSTANCE.getColumnSet_ArgBin1();

    /**
     * The meta object literal for the '<em><b>Op Type</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COLUMN_SET__OP_TYPE = eINSTANCE.getColumnSet_OpType();

    /**
     * The meta object literal for the '<em><b>Arg Bin2</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COLUMN_SET__ARG_BIN2 = eINSTANCE.getColumnSet_ArgBin2();

    /**
     * The meta object literal for the '<em><b>Range</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COLUMN_SET__RANGE = eINSTANCE.getColumnSet_Range();

    /**
     * The meta object literal for the '<em><b>Arg R1</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COLUMN_SET__ARG_R1 = eINSTANCE.getColumnSet_ArgR1();

    /**
     * The meta object literal for the '<em><b>Arg R2</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COLUMN_SET__ARG_R2 = eINSTANCE.getColumnSet_ArgR2();

    /**
     * The meta object literal for the '<em><b>List</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COLUMN_SET__LIST = eINSTANCE.getColumnSet_List();

    /**
     * The meta object literal for the '<em><b>Arg List</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COLUMN_SET__ARG_LIST = eINSTANCE.getColumnSet_ArgList();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.BinopImpl <em>Binop</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.BinopImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getBinop()
     * @generated
     */
    EClass BINOP = eINSTANCE.getBinop();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute BINOP__TYPE = eINSTANCE.getBinop_Type();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.FLOATImpl <em>FLOAT</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.FLOATImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getFLOAT()
     * @generated
     */
    EClass FLOAT = eINSTANCE.getFLOAT();

    /**
     * The meta object literal for the '<em><b>Int Part</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FLOAT__INT_PART = eINSTANCE.getFLOAT_IntPart();

    /**
     * The meta object literal for the '<em><b>Dec Part</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FLOAT__DEC_PART = eINSTANCE.getFLOAT_DecPart();

    /**
     * The meta object literal for the '{@link org.xtext.example.perfectML.perfectML.impl.BOOLImpl <em>BOOL</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.perfectML.perfectML.impl.BOOLImpl
     * @see org.xtext.example.perfectML.perfectML.impl.PerfectMLPackageImpl#getBOOL()
     * @generated
     */
    EClass BOOL = eINSTANCE.getBOOL();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute BOOL__VALUE = eINSTANCE.getBOOL_Value();

  }

} //PerfectMLPackage
