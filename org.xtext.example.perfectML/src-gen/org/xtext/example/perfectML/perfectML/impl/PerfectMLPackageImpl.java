/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.perfectML.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.perfectML.perfectML.Algorithm;
import org.xtext.example.perfectML.perfectML.Binop;
import org.xtext.example.perfectML.perfectML.ColumnDeclarations;
import org.xtext.example.perfectML.perfectML.ColumnSet;
import org.xtext.example.perfectML.perfectML.Input;
import org.xtext.example.perfectML.perfectML.KNeighborsClassifier;
import org.xtext.example.perfectML.perfectML.MLPClassifier;
import org.xtext.example.perfectML.perfectML.Output;
import org.xtext.example.perfectML.perfectML.PerfectMLFactory;
import org.xtext.example.perfectML.perfectML.PerfectMLFile;
import org.xtext.example.perfectML.perfectML.PerfectMLPackage;
import org.xtext.example.perfectML.perfectML.Program;
import org.xtext.example.perfectML.perfectML.TrainingAmount;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PerfectMLPackageImpl extends EPackageImpl implements PerfectMLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass perfectMLFileEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass programEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass algorithmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mlpClassifierEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass svcEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass kNeighborsClassifierEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass trainingAmountEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass columnDeclarationsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass columnSetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass binopEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass floatEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass boolEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.perfectML.perfectML.PerfectMLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private PerfectMLPackageImpl()
  {
    super(eNS_URI, PerfectMLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link PerfectMLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static PerfectMLPackage init()
  {
    if (isInited) return (PerfectMLPackage)EPackage.Registry.INSTANCE.getEPackage(PerfectMLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredPerfectMLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    PerfectMLPackageImpl thePerfectMLPackage = registeredPerfectMLPackage instanceof PerfectMLPackageImpl ? (PerfectMLPackageImpl)registeredPerfectMLPackage : new PerfectMLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    thePerfectMLPackage.createPackageContents();

    // Initialize created meta-data
    thePerfectMLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    thePerfectMLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(PerfectMLPackage.eNS_URI, thePerfectMLPackage);
    return thePerfectMLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPerfectMLFile()
  {
    return perfectMLFileEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPerfectMLFile_Programs()
  {
    return (EReference)perfectMLFileEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getProgram()
  {
    return programEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProgram_Input()
  {
    return (EReference)programEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProgram_Output()
  {
    return (EReference)programEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProgram_Algo()
  {
    return (EReference)programEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProgram_Nbtraining()
  {
    return (EReference)programEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProgram_Column()
  {
    return (EReference)programEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInput()
  {
    return inputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInput_PATH()
  {
    return (EAttribute)inputEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOutput()
  {
    return outputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOutput_PATH()
  {
    return (EAttribute)outputEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAlgorithm()
  {
    return algorithmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMLPClassifier()
  {
    return mlpClassifierEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Hidden_layer_sizes_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Hidden_layer_sizes()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Activation_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Activation()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Solver_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Solver()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Alpha_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Alpha()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Batch_size_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Batch_size()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Learning_rate_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Learning_rate()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Learning_rate_init_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Learning_rate_init()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Power_t_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Power_t()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(15);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Max_iteer_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(16);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Max_iter()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(17);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Shuffle_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(18);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Shuffle()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(19);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Random_state_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(20);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Random_state()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(21);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Tolerance_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(22);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Tolerance()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(23);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Verbose_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(24);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Verbose()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(25);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Warm_start_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(26);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Warm_start()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(27);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Momentum_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(28);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Momentum()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(29);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Nesterovs_momentum_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(30);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Nesterovs_momentum()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(31);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Early_stopping_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(32);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Early_stopping()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(33);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Validation_fraction_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(34);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Validation_fraction()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(35);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Beta_1_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(36);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Beta_1()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(37);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Beta_2_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(38);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Beta_2()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(39);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Epsilon_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(40);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLPClassifier_Epsilon()
  {
    return (EReference)mlpClassifierEClass.getEStructuralFeatures().get(41);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_N_iter_no_change_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(42);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_N_iter_no_change()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(43);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Max_fun_def()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(44);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLPClassifier_Max_fun()
  {
    return (EAttribute)mlpClassifierEClass.getEStructuralFeatures().get(45);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSVC()
  {
    return svcEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_C_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSVC_C()
  {
    return (EReference)svcEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Kernel_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Kernel()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Degree_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Degree()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Gamma_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Gamma()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Coef0_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSVC_Coef0()
  {
    return (EReference)svcEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Shrinking_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSVC_Shrinking()
  {
    return (EReference)svcEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Probability_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSVC_Probability()
  {
    return (EReference)svcEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Tol_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSVC_Tol()
  {
    return (EReference)svcEClass.getEStructuralFeatures().get(15);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Cache_size_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(16);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSVC_Cache_size()
  {
    return (EReference)svcEClass.getEStructuralFeatures().get(17);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Verbose_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(18);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSVC_Verbose()
  {
    return (EReference)svcEClass.getEStructuralFeatures().get(19);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Max_iter_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(20);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Max_iter()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(21);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Decision_function_shape_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(22);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Decision_function_shape()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(23);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Break_ties_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(24);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSVC_Break_ties()
  {
    return (EReference)svcEClass.getEStructuralFeatures().get(25);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Random_state_def()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(26);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVC_Random_state()
  {
    return (EAttribute)svcEClass.getEStructuralFeatures().get(27);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getKNeighborsClassifier()
  {
    return kNeighborsClassifierEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_N_neighbors_def()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_N_neighbors()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_Weights_def()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_Weights()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_Algorithm_def()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_Algorithm()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_Leaf_size_def()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_Leaf_size()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_P_def()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_P()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_Metric_def()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_Metric()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_N_jobs_def()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getKNeighborsClassifier_N_jobs()
  {
    return (EAttribute)kNeighborsClassifierEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTrainingAmount()
  {
    return trainingAmountEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTrainingAmount_Value()
  {
    return (EAttribute)trainingAmountEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTrainingAmount_Percent()
  {
    return (EAttribute)trainingAmountEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColumnDeclarations()
  {
    return columnDeclarationsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColumnDeclarations_Target()
  {
    return (EReference)columnDeclarationsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColumnDeclarations_Target_def()
  {
    return (EAttribute)columnDeclarationsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColumnDeclarations_Predictive()
  {
    return (EReference)columnDeclarationsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColumnDeclarations_Pred_def()
  {
    return (EAttribute)columnDeclarationsEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColumnSet()
  {
    return columnSetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColumnSet_Op()
  {
    return (EAttribute)columnSetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColumnSet_ArgBin1()
  {
    return (EReference)columnSetEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColumnSet_OpType()
  {
    return (EReference)columnSetEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColumnSet_ArgBin2()
  {
    return (EReference)columnSetEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColumnSet_Range()
  {
    return (EAttribute)columnSetEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColumnSet_ArgR1()
  {
    return (EAttribute)columnSetEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColumnSet_ArgR2()
  {
    return (EAttribute)columnSetEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColumnSet_List()
  {
    return (EAttribute)columnSetEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColumnSet_ArgList()
  {
    return (EAttribute)columnSetEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBinop()
  {
    return binopEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBinop_Type()
  {
    return (EAttribute)binopEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFLOAT()
  {
    return floatEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFLOAT_IntPart()
  {
    return (EAttribute)floatEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFLOAT_DecPart()
  {
    return (EAttribute)floatEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBOOL()
  {
    return boolEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBOOL_Value()
  {
    return (EAttribute)boolEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PerfectMLFactory getPerfectMLFactory()
  {
    return (PerfectMLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    perfectMLFileEClass = createEClass(PERFECT_ML_FILE);
    createEReference(perfectMLFileEClass, PERFECT_ML_FILE__PROGRAMS);

    programEClass = createEClass(PROGRAM);
    createEReference(programEClass, PROGRAM__INPUT);
    createEReference(programEClass, PROGRAM__OUTPUT);
    createEReference(programEClass, PROGRAM__ALGO);
    createEReference(programEClass, PROGRAM__NBTRAINING);
    createEReference(programEClass, PROGRAM__COLUMN);

    inputEClass = createEClass(INPUT);
    createEAttribute(inputEClass, INPUT__PATH);

    outputEClass = createEClass(OUTPUT);
    createEAttribute(outputEClass, OUTPUT__PATH);

    algorithmEClass = createEClass(ALGORITHM);

    mlpClassifierEClass = createEClass(MLP_CLASSIFIER);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__HIDDEN_LAYER_SIZES_DEF);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__HIDDEN_LAYER_SIZES);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__ACTIVATION_DEF);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__ACTIVATION);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__SOLVER_DEF);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__SOLVER);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__ALPHA_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__ALPHA);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__BATCH_SIZE_DEF);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__BATCH_SIZE);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__LEARNING_RATE_DEF);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__LEARNING_RATE);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__LEARNING_RATE_INIT_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__LEARNING_RATE_INIT);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__POWER_TDEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__POWER_T);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__MAX_ITEER_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__MAX_ITER);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__SHUFFLE_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__SHUFFLE);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__RANDOM_STATE_DEF);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__RANDOM_STATE);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__TOLERANCE_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__TOLERANCE);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__VERBOSE_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__VERBOSE);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__WARM_START_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__WARM_START);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__MOMENTUM_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__MOMENTUM);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__NESTEROVS_MOMENTUM_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__NESTEROVS_MOMENTUM);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__EARLY_STOPPING_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__EARLY_STOPPING);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__VALIDATION_FRACTION_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__VALIDATION_FRACTION);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__BETA_1DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__BETA_1);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__BETA_2DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__BETA_2);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__EPSILON_DEF);
    createEReference(mlpClassifierEClass, MLP_CLASSIFIER__EPSILON);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__NITER_NO_CHANGE_DEF);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__NITER_NO_CHANGE);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__MAX_FUN_DEF);
    createEAttribute(mlpClassifierEClass, MLP_CLASSIFIER__MAX_FUN);

    svcEClass = createEClass(SVC);
    createEAttribute(svcEClass, SVC__CDEF);
    createEReference(svcEClass, SVC__C);
    createEAttribute(svcEClass, SVC__KERNEL_DEF);
    createEAttribute(svcEClass, SVC__KERNEL);
    createEAttribute(svcEClass, SVC__DEGREE_DEF);
    createEAttribute(svcEClass, SVC__DEGREE);
    createEAttribute(svcEClass, SVC__GAMMA_DEF);
    createEAttribute(svcEClass, SVC__GAMMA);
    createEAttribute(svcEClass, SVC__COEF0_DEF);
    createEReference(svcEClass, SVC__COEF0);
    createEAttribute(svcEClass, SVC__SHRINKING_DEF);
    createEReference(svcEClass, SVC__SHRINKING);
    createEAttribute(svcEClass, SVC__PROBABILITY_DEF);
    createEReference(svcEClass, SVC__PROBABILITY);
    createEAttribute(svcEClass, SVC__TOL_DEF);
    createEReference(svcEClass, SVC__TOL);
    createEAttribute(svcEClass, SVC__CACHE_SIZE_DEF);
    createEReference(svcEClass, SVC__CACHE_SIZE);
    createEAttribute(svcEClass, SVC__VERBOSE_DEF);
    createEReference(svcEClass, SVC__VERBOSE);
    createEAttribute(svcEClass, SVC__MAX_ITER_DEF);
    createEAttribute(svcEClass, SVC__MAX_ITER);
    createEAttribute(svcEClass, SVC__DECISION_FUNCTION_SHAPE_DEF);
    createEAttribute(svcEClass, SVC__DECISION_FUNCTION_SHAPE);
    createEAttribute(svcEClass, SVC__BREAK_TIES_DEF);
    createEReference(svcEClass, SVC__BREAK_TIES);
    createEAttribute(svcEClass, SVC__RANDOM_STATE_DEF);
    createEAttribute(svcEClass, SVC__RANDOM_STATE);

    kNeighborsClassifierEClass = createEClass(KNEIGHBORS_CLASSIFIER);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__NNEIGHBORS_DEF);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__NNEIGHBORS);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__WEIGHTS_DEF);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__WEIGHTS);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__ALGORITHM_DEF);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__ALGORITHM);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__LEAF_SIZE_DEF);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__LEAF_SIZE);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__PDEF);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__P);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__METRIC_DEF);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__METRIC);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__NJOBS_DEF);
    createEAttribute(kNeighborsClassifierEClass, KNEIGHBORS_CLASSIFIER__NJOBS);

    trainingAmountEClass = createEClass(TRAINING_AMOUNT);
    createEAttribute(trainingAmountEClass, TRAINING_AMOUNT__VALUE);
    createEAttribute(trainingAmountEClass, TRAINING_AMOUNT__PERCENT);

    columnDeclarationsEClass = createEClass(COLUMN_DECLARATIONS);
    createEReference(columnDeclarationsEClass, COLUMN_DECLARATIONS__TARGET);
    createEAttribute(columnDeclarationsEClass, COLUMN_DECLARATIONS__TARGET_DEF);
    createEReference(columnDeclarationsEClass, COLUMN_DECLARATIONS__PREDICTIVE);
    createEAttribute(columnDeclarationsEClass, COLUMN_DECLARATIONS__PRED_DEF);

    columnSetEClass = createEClass(COLUMN_SET);
    createEAttribute(columnSetEClass, COLUMN_SET__OP);
    createEReference(columnSetEClass, COLUMN_SET__ARG_BIN1);
    createEReference(columnSetEClass, COLUMN_SET__OP_TYPE);
    createEReference(columnSetEClass, COLUMN_SET__ARG_BIN2);
    createEAttribute(columnSetEClass, COLUMN_SET__RANGE);
    createEAttribute(columnSetEClass, COLUMN_SET__ARG_R1);
    createEAttribute(columnSetEClass, COLUMN_SET__ARG_R2);
    createEAttribute(columnSetEClass, COLUMN_SET__LIST);
    createEAttribute(columnSetEClass, COLUMN_SET__ARG_LIST);

    binopEClass = createEClass(BINOP);
    createEAttribute(binopEClass, BINOP__TYPE);

    floatEClass = createEClass(FLOAT);
    createEAttribute(floatEClass, FLOAT__INT_PART);
    createEAttribute(floatEClass, FLOAT__DEC_PART);

    boolEClass = createEClass(BOOL);
    createEAttribute(boolEClass, BOOL__VALUE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    mlpClassifierEClass.getESuperTypes().add(this.getAlgorithm());
    svcEClass.getESuperTypes().add(this.getAlgorithm());
    kNeighborsClassifierEClass.getESuperTypes().add(this.getAlgorithm());

    // Initialize classes and features; add operations and parameters
    initEClass(perfectMLFileEClass, PerfectMLFile.class, "PerfectMLFile", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPerfectMLFile_Programs(), this.getProgram(), null, "programs", null, 0, -1, PerfectMLFile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(programEClass, Program.class, "Program", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getProgram_Input(), this.getInput(), null, "input", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgram_Output(), this.getOutput(), null, "output", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgram_Algo(), this.getAlgorithm(), null, "algo", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgram_Nbtraining(), this.getTrainingAmount(), null, "nbtraining", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgram_Column(), this.getColumnDeclarations(), null, "column", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inputEClass, Input.class, "Input", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInput_PATH(), ecorePackage.getEString(), "PATH", null, 0, 1, Input.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(outputEClass, Output.class, "Output", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOutput_PATH(), ecorePackage.getEString(), "PATH", null, 0, 1, Output.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(algorithmEClass, Algorithm.class, "Algorithm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(mlpClassifierEClass, MLPClassifier.class, "MLPClassifier", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMLPClassifier_Hidden_layer_sizes_def(), ecorePackage.getEBoolean(), "hidden_layer_sizes_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Hidden_layer_sizes(), ecorePackage.getEInt(), "hidden_layer_sizes", null, 0, -1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Activation_def(), ecorePackage.getEBoolean(), "activation_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Activation(), ecorePackage.getEString(), "activation", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Solver_def(), ecorePackage.getEBoolean(), "solver_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Solver(), ecorePackage.getEString(), "solver", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Alpha_def(), ecorePackage.getEBoolean(), "alpha_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Alpha(), this.getFLOAT(), null, "alpha", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Batch_size_def(), ecorePackage.getEBoolean(), "batch_size_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Batch_size(), ecorePackage.getEInt(), "batch_size", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Learning_rate_def(), ecorePackage.getEBoolean(), "learning_rate_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Learning_rate(), ecorePackage.getEString(), "learning_rate", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Learning_rate_init_def(), ecorePackage.getEBoolean(), "learning_rate_init_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Learning_rate_init(), this.getFLOAT(), null, "learning_rate_init", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Power_t_def(), ecorePackage.getEBoolean(), "power_t_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Power_t(), this.getFLOAT(), null, "power_t", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Max_iteer_def(), ecorePackage.getEBoolean(), "max_iteer_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Max_iter(), this.getFLOAT(), null, "max_iter", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Shuffle_def(), ecorePackage.getEBoolean(), "shuffle_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Shuffle(), this.getBOOL(), null, "shuffle", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Random_state_def(), ecorePackage.getEBoolean(), "random_state_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Random_state(), ecorePackage.getEInt(), "random_state", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Tolerance_def(), ecorePackage.getEBoolean(), "tolerance_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Tolerance(), this.getFLOAT(), null, "tolerance", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Verbose_def(), ecorePackage.getEBoolean(), "verbose_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Verbose(), this.getBOOL(), null, "verbose", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Warm_start_def(), ecorePackage.getEBoolean(), "warm_start_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Warm_start(), this.getBOOL(), null, "warm_start", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Momentum_def(), ecorePackage.getEBoolean(), "momentum_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Momentum(), this.getFLOAT(), null, "momentum", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Nesterovs_momentum_def(), ecorePackage.getEBoolean(), "nesterovs_momentum_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Nesterovs_momentum(), this.getBOOL(), null, "nesterovs_momentum", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Early_stopping_def(), ecorePackage.getEBoolean(), "early_stopping_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Early_stopping(), this.getBOOL(), null, "early_stopping", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Validation_fraction_def(), ecorePackage.getEBoolean(), "validation_fraction_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Validation_fraction(), this.getFLOAT(), null, "validation_fraction", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Beta_1_def(), ecorePackage.getEBoolean(), "beta_1_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Beta_1(), this.getFLOAT(), null, "beta_1", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Beta_2_def(), ecorePackage.getEBoolean(), "beta_2_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Beta_2(), this.getFLOAT(), null, "beta_2", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Epsilon_def(), ecorePackage.getEBoolean(), "epsilon_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLPClassifier_Epsilon(), this.getFLOAT(), null, "epsilon", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_N_iter_no_change_def(), ecorePackage.getEBoolean(), "n_iter_no_change_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_N_iter_no_change(), ecorePackage.getEInt(), "n_iter_no_change", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Max_fun_def(), ecorePackage.getEBoolean(), "max_fun_def", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMLPClassifier_Max_fun(), ecorePackage.getEInt(), "max_fun", null, 0, 1, MLPClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(svcEClass, org.xtext.example.perfectML.perfectML.SVC.class, "SVC", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSVC_C_def(), ecorePackage.getEBoolean(), "C_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSVC_C(), this.getFLOAT(), null, "C", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Kernel_def(), ecorePackage.getEBoolean(), "kernel_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Kernel(), ecorePackage.getEString(), "kernel", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Degree_def(), ecorePackage.getEBoolean(), "degree_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Degree(), ecorePackage.getEInt(), "degree", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Gamma_def(), ecorePackage.getEBoolean(), "gamma_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Gamma(), ecorePackage.getEString(), "gamma", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Coef0_def(), ecorePackage.getEBoolean(), "coef0_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSVC_Coef0(), this.getFLOAT(), null, "coef0", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Shrinking_def(), ecorePackage.getEBoolean(), "shrinking_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSVC_Shrinking(), this.getBOOL(), null, "shrinking", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Probability_def(), ecorePackage.getEBoolean(), "probability_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSVC_Probability(), this.getBOOL(), null, "probability", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Tol_def(), ecorePackage.getEBoolean(), "tol_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSVC_Tol(), this.getFLOAT(), null, "tol", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Cache_size_def(), ecorePackage.getEBoolean(), "cache_size_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSVC_Cache_size(), this.getFLOAT(), null, "cache_size", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Verbose_def(), ecorePackage.getEBoolean(), "verbose_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSVC_Verbose(), this.getBOOL(), null, "verbose", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Max_iter_def(), ecorePackage.getEBoolean(), "max_iter_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Max_iter(), ecorePackage.getEInt(), "max_iter", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Decision_function_shape_def(), ecorePackage.getEBoolean(), "decision_function_shape_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Decision_function_shape(), ecorePackage.getEString(), "decision_function_shape", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Break_ties_def(), ecorePackage.getEBoolean(), "break_ties_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSVC_Break_ties(), this.getBOOL(), null, "break_ties", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Random_state_def(), ecorePackage.getEBoolean(), "random_state_def", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVC_Random_state(), ecorePackage.getEInt(), "random_state", null, 0, 1, org.xtext.example.perfectML.perfectML.SVC.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(kNeighborsClassifierEClass, KNeighborsClassifier.class, "KNeighborsClassifier", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getKNeighborsClassifier_N_neighbors_def(), ecorePackage.getEBoolean(), "n_neighbors_def", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_N_neighbors(), ecorePackage.getEInt(), "n_neighbors", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_Weights_def(), ecorePackage.getEBoolean(), "weights_def", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_Weights(), ecorePackage.getEString(), "weights", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_Algorithm_def(), ecorePackage.getEBoolean(), "algorithm_def", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_Algorithm(), ecorePackage.getEString(), "algorithm", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_Leaf_size_def(), ecorePackage.getEBoolean(), "leaf_size_def", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_Leaf_size(), ecorePackage.getEInt(), "leaf_size", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_P_def(), ecorePackage.getEBoolean(), "p_def", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_P(), ecorePackage.getEInt(), "p", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_Metric_def(), ecorePackage.getEBoolean(), "metric_def", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_Metric(), ecorePackage.getEString(), "metric", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_N_jobs_def(), ecorePackage.getEBoolean(), "n_jobs_def", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getKNeighborsClassifier_N_jobs(), ecorePackage.getEInt(), "n_jobs", null, 0, 1, KNeighborsClassifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(trainingAmountEClass, TrainingAmount.class, "TrainingAmount", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTrainingAmount_Value(), ecorePackage.getEInt(), "value", null, 0, 1, TrainingAmount.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTrainingAmount_Percent(), ecorePackage.getEBoolean(), "percent", null, 0, 1, TrainingAmount.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(columnDeclarationsEClass, ColumnDeclarations.class, "ColumnDeclarations", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getColumnDeclarations_Target(), this.getColumnSet(), null, "target", null, 0, 1, ColumnDeclarations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColumnDeclarations_Target_def(), ecorePackage.getEBoolean(), "target_def", null, 0, 1, ColumnDeclarations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getColumnDeclarations_Predictive(), this.getColumnSet(), null, "predictive", null, 0, 1, ColumnDeclarations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColumnDeclarations_Pred_def(), ecorePackage.getEBoolean(), "pred_def", null, 0, 1, ColumnDeclarations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(columnSetEClass, ColumnSet.class, "ColumnSet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColumnSet_Op(), ecorePackage.getEBoolean(), "op", null, 0, 1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getColumnSet_ArgBin1(), this.getColumnSet(), null, "ArgBin1", null, 0, 1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getColumnSet_OpType(), this.getBinop(), null, "opType", null, 0, 1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getColumnSet_ArgBin2(), this.getColumnSet(), null, "ArgBin2", null, 0, 1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColumnSet_Range(), ecorePackage.getEBoolean(), "range", null, 0, 1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColumnSet_ArgR1(), ecorePackage.getEInt(), "ArgR1", null, 0, 1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColumnSet_ArgR2(), ecorePackage.getEInt(), "ArgR2", null, 0, 1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColumnSet_List(), ecorePackage.getEBoolean(), "list", null, 0, 1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColumnSet_ArgList(), ecorePackage.getEInt(), "ArgList", null, 0, -1, ColumnSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(binopEClass, Binop.class, "Binop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBinop_Type(), ecorePackage.getEString(), "type", null, 0, 1, Binop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(floatEClass, org.xtext.example.perfectML.perfectML.FLOAT.class, "FLOAT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFLOAT_IntPart(), ecorePackage.getEInt(), "IntPart", null, 0, 1, org.xtext.example.perfectML.perfectML.FLOAT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFLOAT_DecPart(), ecorePackage.getEInt(), "DecPart", null, 0, 1, org.xtext.example.perfectML.perfectML.FLOAT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(boolEClass, org.xtext.example.perfectML.perfectML.BOOL.class, "BOOL", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBOOL_Value(), ecorePackage.getEString(), "value", null, 0, 1, org.xtext.example.perfectML.perfectML.BOOL.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //PerfectMLPackageImpl
