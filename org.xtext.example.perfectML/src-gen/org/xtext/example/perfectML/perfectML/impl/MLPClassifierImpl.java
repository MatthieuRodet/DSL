/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.perfectML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.example.perfectML.perfectML.BOOL;
import org.xtext.example.perfectML.perfectML.FLOAT;
import org.xtext.example.perfectML.perfectML.MLPClassifier;
import org.xtext.example.perfectML.perfectML.PerfectMLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>MLP Classifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isHidden_layer_sizes_def <em>Hidden layer sizes def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getHidden_layer_sizes <em>Hidden layer sizes</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isActivation_def <em>Activation def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getActivation <em>Activation</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isSolver_def <em>Solver def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getSolver <em>Solver</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isAlpha_def <em>Alpha def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getAlpha <em>Alpha</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isBatch_size_def <em>Batch size def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getBatch_size <em>Batch size</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isLearning_rate_def <em>Learning rate def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getLearning_rate <em>Learning rate</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isLearning_rate_init_def <em>Learning rate init def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getLearning_rate_init <em>Learning rate init</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isPower_t_def <em>Power tdef</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getPower_t <em>Power t</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isMax_iteer_def <em>Max iteer def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getMax_iter <em>Max iter</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isShuffle_def <em>Shuffle def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getShuffle <em>Shuffle</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isRandom_state_def <em>Random state def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getRandom_state <em>Random state</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isTolerance_def <em>Tolerance def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getTolerance <em>Tolerance</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isVerbose_def <em>Verbose def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getVerbose <em>Verbose</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isWarm_start_def <em>Warm start def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getWarm_start <em>Warm start</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isMomentum_def <em>Momentum def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getMomentum <em>Momentum</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isNesterovs_momentum_def <em>Nesterovs momentum def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getNesterovs_momentum <em>Nesterovs momentum</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isEarly_stopping_def <em>Early stopping def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getEarly_stopping <em>Early stopping</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isValidation_fraction_def <em>Validation fraction def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getValidation_fraction <em>Validation fraction</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isBeta_1_def <em>Beta 1def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getBeta_1 <em>Beta 1</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isBeta_2_def <em>Beta 2def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getBeta_2 <em>Beta 2</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isEpsilon_def <em>Epsilon def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getEpsilon <em>Epsilon</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isN_iter_no_change_def <em>Niter no change def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getN_iter_no_change <em>Niter no change</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#isMax_fun_def <em>Max fun def</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.MLPClassifierImpl#getMax_fun <em>Max fun</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MLPClassifierImpl extends AlgorithmImpl implements MLPClassifier
{
  /**
   * The default value of the '{@link #isHidden_layer_sizes_def() <em>Hidden layer sizes def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHidden_layer_sizes_def()
   * @generated
   * @ordered
   */
  protected static final boolean HIDDEN_LAYER_SIZES_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHidden_layer_sizes_def() <em>Hidden layer sizes def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHidden_layer_sizes_def()
   * @generated
   * @ordered
   */
  protected boolean hidden_layer_sizes_def = HIDDEN_LAYER_SIZES_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getHidden_layer_sizes() <em>Hidden layer sizes</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHidden_layer_sizes()
   * @generated
   * @ordered
   */
  protected EList<Integer> hidden_layer_sizes;

  /**
   * The default value of the '{@link #isActivation_def() <em>Activation def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isActivation_def()
   * @generated
   * @ordered
   */
  protected static final boolean ACTIVATION_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isActivation_def() <em>Activation def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isActivation_def()
   * @generated
   * @ordered
   */
  protected boolean activation_def = ACTIVATION_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getActivation() <em>Activation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivation()
   * @generated
   * @ordered
   */
  protected static final String ACTIVATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getActivation() <em>Activation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivation()
   * @generated
   * @ordered
   */
  protected String activation = ACTIVATION_EDEFAULT;

  /**
   * The default value of the '{@link #isSolver_def() <em>Solver def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSolver_def()
   * @generated
   * @ordered
   */
  protected static final boolean SOLVER_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSolver_def() <em>Solver def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSolver_def()
   * @generated
   * @ordered
   */
  protected boolean solver_def = SOLVER_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getSolver() <em>Solver</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolver()
   * @generated
   * @ordered
   */
  protected static final String SOLVER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSolver() <em>Solver</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolver()
   * @generated
   * @ordered
   */
  protected String solver = SOLVER_EDEFAULT;

  /**
   * The default value of the '{@link #isAlpha_def() <em>Alpha def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAlpha_def()
   * @generated
   * @ordered
   */
  protected static final boolean ALPHA_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAlpha_def() <em>Alpha def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAlpha_def()
   * @generated
   * @ordered
   */
  protected boolean alpha_def = ALPHA_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getAlpha() <em>Alpha</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlpha()
   * @generated
   * @ordered
   */
  protected FLOAT alpha;

  /**
   * The default value of the '{@link #isBatch_size_def() <em>Batch size def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBatch_size_def()
   * @generated
   * @ordered
   */
  protected static final boolean BATCH_SIZE_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBatch_size_def() <em>Batch size def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBatch_size_def()
   * @generated
   * @ordered
   */
  protected boolean batch_size_def = BATCH_SIZE_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getBatch_size() <em>Batch size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatch_size()
   * @generated
   * @ordered
   */
  protected static final int BATCH_SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getBatch_size() <em>Batch size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatch_size()
   * @generated
   * @ordered
   */
  protected int batch_size = BATCH_SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #isLearning_rate_def() <em>Learning rate def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLearning_rate_def()
   * @generated
   * @ordered
   */
  protected static final boolean LEARNING_RATE_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isLearning_rate_def() <em>Learning rate def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLearning_rate_def()
   * @generated
   * @ordered
   */
  protected boolean learning_rate_def = LEARNING_RATE_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getLearning_rate() <em>Learning rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLearning_rate()
   * @generated
   * @ordered
   */
  protected static final String LEARNING_RATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLearning_rate() <em>Learning rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLearning_rate()
   * @generated
   * @ordered
   */
  protected String learning_rate = LEARNING_RATE_EDEFAULT;

  /**
   * The default value of the '{@link #isLearning_rate_init_def() <em>Learning rate init def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLearning_rate_init_def()
   * @generated
   * @ordered
   */
  protected static final boolean LEARNING_RATE_INIT_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isLearning_rate_init_def() <em>Learning rate init def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLearning_rate_init_def()
   * @generated
   * @ordered
   */
  protected boolean learning_rate_init_def = LEARNING_RATE_INIT_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getLearning_rate_init() <em>Learning rate init</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLearning_rate_init()
   * @generated
   * @ordered
   */
  protected FLOAT learning_rate_init;

  /**
   * The default value of the '{@link #isPower_t_def() <em>Power tdef</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPower_t_def()
   * @generated
   * @ordered
   */
  protected static final boolean POWER_TDEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPower_t_def() <em>Power tdef</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPower_t_def()
   * @generated
   * @ordered
   */
  protected boolean power_t_def = POWER_TDEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getPower_t() <em>Power t</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPower_t()
   * @generated
   * @ordered
   */
  protected FLOAT power_t;

  /**
   * The default value of the '{@link #isMax_iteer_def() <em>Max iteer def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMax_iteer_def()
   * @generated
   * @ordered
   */
  protected static final boolean MAX_ITEER_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMax_iteer_def() <em>Max iteer def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMax_iteer_def()
   * @generated
   * @ordered
   */
  protected boolean max_iteer_def = MAX_ITEER_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getMax_iter() <em>Max iter</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax_iter()
   * @generated
   * @ordered
   */
  protected FLOAT max_iter;

  /**
   * The default value of the '{@link #isShuffle_def() <em>Shuffle def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isShuffle_def()
   * @generated
   * @ordered
   */
  protected static final boolean SHUFFLE_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isShuffle_def() <em>Shuffle def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isShuffle_def()
   * @generated
   * @ordered
   */
  protected boolean shuffle_def = SHUFFLE_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getShuffle() <em>Shuffle</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShuffle()
   * @generated
   * @ordered
   */
  protected BOOL shuffle;

  /**
   * The default value of the '{@link #isRandom_state_def() <em>Random state def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRandom_state_def()
   * @generated
   * @ordered
   */
  protected static final boolean RANDOM_STATE_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRandom_state_def() <em>Random state def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRandom_state_def()
   * @generated
   * @ordered
   */
  protected boolean random_state_def = RANDOM_STATE_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getRandom_state() <em>Random state</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRandom_state()
   * @generated
   * @ordered
   */
  protected static final int RANDOM_STATE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRandom_state() <em>Random state</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRandom_state()
   * @generated
   * @ordered
   */
  protected int random_state = RANDOM_STATE_EDEFAULT;

  /**
   * The default value of the '{@link #isTolerance_def() <em>Tolerance def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTolerance_def()
   * @generated
   * @ordered
   */
  protected static final boolean TOLERANCE_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTolerance_def() <em>Tolerance def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTolerance_def()
   * @generated
   * @ordered
   */
  protected boolean tolerance_def = TOLERANCE_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getTolerance() <em>Tolerance</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTolerance()
   * @generated
   * @ordered
   */
  protected FLOAT tolerance;

  /**
   * The default value of the '{@link #isVerbose_def() <em>Verbose def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVerbose_def()
   * @generated
   * @ordered
   */
  protected static final boolean VERBOSE_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isVerbose_def() <em>Verbose def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVerbose_def()
   * @generated
   * @ordered
   */
  protected boolean verbose_def = VERBOSE_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getVerbose() <em>Verbose</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVerbose()
   * @generated
   * @ordered
   */
  protected BOOL verbose;

  /**
   * The default value of the '{@link #isWarm_start_def() <em>Warm start def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWarm_start_def()
   * @generated
   * @ordered
   */
  protected static final boolean WARM_START_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isWarm_start_def() <em>Warm start def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWarm_start_def()
   * @generated
   * @ordered
   */
  protected boolean warm_start_def = WARM_START_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getWarm_start() <em>Warm start</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWarm_start()
   * @generated
   * @ordered
   */
  protected BOOL warm_start;

  /**
   * The default value of the '{@link #isMomentum_def() <em>Momentum def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMomentum_def()
   * @generated
   * @ordered
   */
  protected static final boolean MOMENTUM_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMomentum_def() <em>Momentum def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMomentum_def()
   * @generated
   * @ordered
   */
  protected boolean momentum_def = MOMENTUM_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getMomentum() <em>Momentum</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMomentum()
   * @generated
   * @ordered
   */
  protected FLOAT momentum;

  /**
   * The default value of the '{@link #isNesterovs_momentum_def() <em>Nesterovs momentum def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNesterovs_momentum_def()
   * @generated
   * @ordered
   */
  protected static final boolean NESTEROVS_MOMENTUM_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNesterovs_momentum_def() <em>Nesterovs momentum def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNesterovs_momentum_def()
   * @generated
   * @ordered
   */
  protected boolean nesterovs_momentum_def = NESTEROVS_MOMENTUM_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getNesterovs_momentum() <em>Nesterovs momentum</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNesterovs_momentum()
   * @generated
   * @ordered
   */
  protected BOOL nesterovs_momentum;

  /**
   * The default value of the '{@link #isEarly_stopping_def() <em>Early stopping def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEarly_stopping_def()
   * @generated
   * @ordered
   */
  protected static final boolean EARLY_STOPPING_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEarly_stopping_def() <em>Early stopping def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEarly_stopping_def()
   * @generated
   * @ordered
   */
  protected boolean early_stopping_def = EARLY_STOPPING_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getEarly_stopping() <em>Early stopping</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEarly_stopping()
   * @generated
   * @ordered
   */
  protected BOOL early_stopping;

  /**
   * The default value of the '{@link #isValidation_fraction_def() <em>Validation fraction def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isValidation_fraction_def()
   * @generated
   * @ordered
   */
  protected static final boolean VALIDATION_FRACTION_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isValidation_fraction_def() <em>Validation fraction def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isValidation_fraction_def()
   * @generated
   * @ordered
   */
  protected boolean validation_fraction_def = VALIDATION_FRACTION_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getValidation_fraction() <em>Validation fraction</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValidation_fraction()
   * @generated
   * @ordered
   */
  protected FLOAT validation_fraction;

  /**
   * The default value of the '{@link #isBeta_1_def() <em>Beta 1def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBeta_1_def()
   * @generated
   * @ordered
   */
  protected static final boolean BETA_1DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBeta_1_def() <em>Beta 1def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBeta_1_def()
   * @generated
   * @ordered
   */
  protected boolean beta_1_def = BETA_1DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getBeta_1() <em>Beta 1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBeta_1()
   * @generated
   * @ordered
   */
  protected FLOAT beta_1;

  /**
   * The default value of the '{@link #isBeta_2_def() <em>Beta 2def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBeta_2_def()
   * @generated
   * @ordered
   */
  protected static final boolean BETA_2DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBeta_2_def() <em>Beta 2def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBeta_2_def()
   * @generated
   * @ordered
   */
  protected boolean beta_2_def = BETA_2DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getBeta_2() <em>Beta 2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBeta_2()
   * @generated
   * @ordered
   */
  protected FLOAT beta_2;

  /**
   * The default value of the '{@link #isEpsilon_def() <em>Epsilon def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEpsilon_def()
   * @generated
   * @ordered
   */
  protected static final boolean EPSILON_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEpsilon_def() <em>Epsilon def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEpsilon_def()
   * @generated
   * @ordered
   */
  protected boolean epsilon_def = EPSILON_DEF_EDEFAULT;

  /**
   * The cached value of the '{@link #getEpsilon() <em>Epsilon</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEpsilon()
   * @generated
   * @ordered
   */
  protected FLOAT epsilon;

  /**
   * The default value of the '{@link #isN_iter_no_change_def() <em>Niter no change def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isN_iter_no_change_def()
   * @generated
   * @ordered
   */
  protected static final boolean NITER_NO_CHANGE_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isN_iter_no_change_def() <em>Niter no change def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isN_iter_no_change_def()
   * @generated
   * @ordered
   */
  protected boolean n_iter_no_change_def = NITER_NO_CHANGE_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getN_iter_no_change() <em>Niter no change</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN_iter_no_change()
   * @generated
   * @ordered
   */
  protected static final int NITER_NO_CHANGE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getN_iter_no_change() <em>Niter no change</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN_iter_no_change()
   * @generated
   * @ordered
   */
  protected int n_iter_no_change = NITER_NO_CHANGE_EDEFAULT;

  /**
   * The default value of the '{@link #isMax_fun_def() <em>Max fun def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMax_fun_def()
   * @generated
   * @ordered
   */
  protected static final boolean MAX_FUN_DEF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMax_fun_def() <em>Max fun def</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMax_fun_def()
   * @generated
   * @ordered
   */
  protected boolean max_fun_def = MAX_FUN_DEF_EDEFAULT;

  /**
   * The default value of the '{@link #getMax_fun() <em>Max fun</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax_fun()
   * @generated
   * @ordered
   */
  protected static final int MAX_FUN_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMax_fun() <em>Max fun</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMax_fun()
   * @generated
   * @ordered
   */
  protected int max_fun = MAX_FUN_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MLPClassifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PerfectMLPackage.Literals.MLP_CLASSIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isHidden_layer_sizes_def()
  {
    return hidden_layer_sizes_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHidden_layer_sizes_def(boolean newHidden_layer_sizes_def)
  {
    boolean oldHidden_layer_sizes_def = hidden_layer_sizes_def;
    hidden_layer_sizes_def = newHidden_layer_sizes_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES_DEF, oldHidden_layer_sizes_def, hidden_layer_sizes_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Integer> getHidden_layer_sizes()
  {
    if (hidden_layer_sizes == null)
    {
      hidden_layer_sizes = new EDataTypeEList<Integer>(Integer.class, this, PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES);
    }
    return hidden_layer_sizes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isActivation_def()
  {
    return activation_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActivation_def(boolean newActivation_def)
  {
    boolean oldActivation_def = activation_def;
    activation_def = newActivation_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION_DEF, oldActivation_def, activation_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getActivation()
  {
    return activation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActivation(String newActivation)
  {
    String oldActivation = activation;
    activation = newActivation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION, oldActivation, activation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSolver_def()
  {
    return solver_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSolver_def(boolean newSolver_def)
  {
    boolean oldSolver_def = solver_def;
    solver_def = newSolver_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__SOLVER_DEF, oldSolver_def, solver_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSolver()
  {
    return solver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSolver(String newSolver)
  {
    String oldSolver = solver;
    solver = newSolver;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__SOLVER, oldSolver, solver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAlpha_def()
  {
    return alpha_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlpha_def(boolean newAlpha_def)
  {
    boolean oldAlpha_def = alpha_def;
    alpha_def = newAlpha_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__ALPHA_DEF, oldAlpha_def, alpha_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getAlpha()
  {
    return alpha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlpha(FLOAT newAlpha, NotificationChain msgs)
  {
    FLOAT oldAlpha = alpha;
    alpha = newAlpha;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__ALPHA, oldAlpha, newAlpha);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlpha(FLOAT newAlpha)
  {
    if (newAlpha != alpha)
    {
      NotificationChain msgs = null;
      if (alpha != null)
        msgs = ((InternalEObject)alpha).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__ALPHA, null, msgs);
      if (newAlpha != null)
        msgs = ((InternalEObject)newAlpha).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__ALPHA, null, msgs);
      msgs = basicSetAlpha(newAlpha, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__ALPHA, newAlpha, newAlpha));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBatch_size_def()
  {
    return batch_size_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatch_size_def(boolean newBatch_size_def)
  {
    boolean oldBatch_size_def = batch_size_def;
    batch_size_def = newBatch_size_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE_DEF, oldBatch_size_def, batch_size_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getBatch_size()
  {
    return batch_size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatch_size(int newBatch_size)
  {
    int oldBatch_size = batch_size;
    batch_size = newBatch_size;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE, oldBatch_size, batch_size));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isLearning_rate_def()
  {
    return learning_rate_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLearning_rate_def(boolean newLearning_rate_def)
  {
    boolean oldLearning_rate_def = learning_rate_def;
    learning_rate_def = newLearning_rate_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_DEF, oldLearning_rate_def, learning_rate_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLearning_rate()
  {
    return learning_rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLearning_rate(String newLearning_rate)
  {
    String oldLearning_rate = learning_rate;
    learning_rate = newLearning_rate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE, oldLearning_rate, learning_rate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isLearning_rate_init_def()
  {
    return learning_rate_init_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLearning_rate_init_def(boolean newLearning_rate_init_def)
  {
    boolean oldLearning_rate_init_def = learning_rate_init_def;
    learning_rate_init_def = newLearning_rate_init_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT_DEF, oldLearning_rate_init_def, learning_rate_init_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getLearning_rate_init()
  {
    return learning_rate_init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLearning_rate_init(FLOAT newLearning_rate_init, NotificationChain msgs)
  {
    FLOAT oldLearning_rate_init = learning_rate_init;
    learning_rate_init = newLearning_rate_init;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT, oldLearning_rate_init, newLearning_rate_init);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLearning_rate_init(FLOAT newLearning_rate_init)
  {
    if (newLearning_rate_init != learning_rate_init)
    {
      NotificationChain msgs = null;
      if (learning_rate_init != null)
        msgs = ((InternalEObject)learning_rate_init).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT, null, msgs);
      if (newLearning_rate_init != null)
        msgs = ((InternalEObject)newLearning_rate_init).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT, null, msgs);
      msgs = basicSetLearning_rate_init(newLearning_rate_init, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT, newLearning_rate_init, newLearning_rate_init));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPower_t_def()
  {
    return power_t_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPower_t_def(boolean newPower_t_def)
  {
    boolean oldPower_t_def = power_t_def;
    power_t_def = newPower_t_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__POWER_TDEF, oldPower_t_def, power_t_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getPower_t()
  {
    return power_t;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPower_t(FLOAT newPower_t, NotificationChain msgs)
  {
    FLOAT oldPower_t = power_t;
    power_t = newPower_t;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__POWER_T, oldPower_t, newPower_t);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPower_t(FLOAT newPower_t)
  {
    if (newPower_t != power_t)
    {
      NotificationChain msgs = null;
      if (power_t != null)
        msgs = ((InternalEObject)power_t).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__POWER_T, null, msgs);
      if (newPower_t != null)
        msgs = ((InternalEObject)newPower_t).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__POWER_T, null, msgs);
      msgs = basicSetPower_t(newPower_t, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__POWER_T, newPower_t, newPower_t));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMax_iteer_def()
  {
    return max_iteer_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMax_iteer_def(boolean newMax_iteer_def)
  {
    boolean oldMax_iteer_def = max_iteer_def;
    max_iteer_def = newMax_iteer_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__MAX_ITEER_DEF, oldMax_iteer_def, max_iteer_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getMax_iter()
  {
    return max_iter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMax_iter(FLOAT newMax_iter, NotificationChain msgs)
  {
    FLOAT oldMax_iter = max_iter;
    max_iter = newMax_iter;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER, oldMax_iter, newMax_iter);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMax_iter(FLOAT newMax_iter)
  {
    if (newMax_iter != max_iter)
    {
      NotificationChain msgs = null;
      if (max_iter != null)
        msgs = ((InternalEObject)max_iter).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER, null, msgs);
      if (newMax_iter != null)
        msgs = ((InternalEObject)newMax_iter).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER, null, msgs);
      msgs = basicSetMax_iter(newMax_iter, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER, newMax_iter, newMax_iter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isShuffle_def()
  {
    return shuffle_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShuffle_def(boolean newShuffle_def)
  {
    boolean oldShuffle_def = shuffle_def;
    shuffle_def = newShuffle_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE_DEF, oldShuffle_def, shuffle_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOL getShuffle()
  {
    return shuffle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetShuffle(BOOL newShuffle, NotificationChain msgs)
  {
    BOOL oldShuffle = shuffle;
    shuffle = newShuffle;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE, oldShuffle, newShuffle);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShuffle(BOOL newShuffle)
  {
    if (newShuffle != shuffle)
    {
      NotificationChain msgs = null;
      if (shuffle != null)
        msgs = ((InternalEObject)shuffle).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE, null, msgs);
      if (newShuffle != null)
        msgs = ((InternalEObject)newShuffle).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE, null, msgs);
      msgs = basicSetShuffle(newShuffle, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE, newShuffle, newShuffle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRandom_state_def()
  {
    return random_state_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRandom_state_def(boolean newRandom_state_def)
  {
    boolean oldRandom_state_def = random_state_def;
    random_state_def = newRandom_state_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE_DEF, oldRandom_state_def, random_state_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getRandom_state()
  {
    return random_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRandom_state(int newRandom_state)
  {
    int oldRandom_state = random_state;
    random_state = newRandom_state;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE, oldRandom_state, random_state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTolerance_def()
  {
    return tolerance_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTolerance_def(boolean newTolerance_def)
  {
    boolean oldTolerance_def = tolerance_def;
    tolerance_def = newTolerance_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE_DEF, oldTolerance_def, tolerance_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getTolerance()
  {
    return tolerance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTolerance(FLOAT newTolerance, NotificationChain msgs)
  {
    FLOAT oldTolerance = tolerance;
    tolerance = newTolerance;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE, oldTolerance, newTolerance);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTolerance(FLOAT newTolerance)
  {
    if (newTolerance != tolerance)
    {
      NotificationChain msgs = null;
      if (tolerance != null)
        msgs = ((InternalEObject)tolerance).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE, null, msgs);
      if (newTolerance != null)
        msgs = ((InternalEObject)newTolerance).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE, null, msgs);
      msgs = basicSetTolerance(newTolerance, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE, newTolerance, newTolerance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isVerbose_def()
  {
    return verbose_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVerbose_def(boolean newVerbose_def)
  {
    boolean oldVerbose_def = verbose_def;
    verbose_def = newVerbose_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__VERBOSE_DEF, oldVerbose_def, verbose_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOL getVerbose()
  {
    return verbose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVerbose(BOOL newVerbose, NotificationChain msgs)
  {
    BOOL oldVerbose = verbose;
    verbose = newVerbose;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__VERBOSE, oldVerbose, newVerbose);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVerbose(BOOL newVerbose)
  {
    if (newVerbose != verbose)
    {
      NotificationChain msgs = null;
      if (verbose != null)
        msgs = ((InternalEObject)verbose).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__VERBOSE, null, msgs);
      if (newVerbose != null)
        msgs = ((InternalEObject)newVerbose).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__VERBOSE, null, msgs);
      msgs = basicSetVerbose(newVerbose, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__VERBOSE, newVerbose, newVerbose));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isWarm_start_def()
  {
    return warm_start_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWarm_start_def(boolean newWarm_start_def)
  {
    boolean oldWarm_start_def = warm_start_def;
    warm_start_def = newWarm_start_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__WARM_START_DEF, oldWarm_start_def, warm_start_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOL getWarm_start()
  {
    return warm_start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWarm_start(BOOL newWarm_start, NotificationChain msgs)
  {
    BOOL oldWarm_start = warm_start;
    warm_start = newWarm_start;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__WARM_START, oldWarm_start, newWarm_start);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWarm_start(BOOL newWarm_start)
  {
    if (newWarm_start != warm_start)
    {
      NotificationChain msgs = null;
      if (warm_start != null)
        msgs = ((InternalEObject)warm_start).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__WARM_START, null, msgs);
      if (newWarm_start != null)
        msgs = ((InternalEObject)newWarm_start).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__WARM_START, null, msgs);
      msgs = basicSetWarm_start(newWarm_start, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__WARM_START, newWarm_start, newWarm_start));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMomentum_def()
  {
    return momentum_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMomentum_def(boolean newMomentum_def)
  {
    boolean oldMomentum_def = momentum_def;
    momentum_def = newMomentum_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM_DEF, oldMomentum_def, momentum_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getMomentum()
  {
    return momentum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMomentum(FLOAT newMomentum, NotificationChain msgs)
  {
    FLOAT oldMomentum = momentum;
    momentum = newMomentum;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM, oldMomentum, newMomentum);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMomentum(FLOAT newMomentum)
  {
    if (newMomentum != momentum)
    {
      NotificationChain msgs = null;
      if (momentum != null)
        msgs = ((InternalEObject)momentum).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM, null, msgs);
      if (newMomentum != null)
        msgs = ((InternalEObject)newMomentum).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM, null, msgs);
      msgs = basicSetMomentum(newMomentum, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM, newMomentum, newMomentum));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNesterovs_momentum_def()
  {
    return nesterovs_momentum_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNesterovs_momentum_def(boolean newNesterovs_momentum_def)
  {
    boolean oldNesterovs_momentum_def = nesterovs_momentum_def;
    nesterovs_momentum_def = newNesterovs_momentum_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM_DEF, oldNesterovs_momentum_def, nesterovs_momentum_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOL getNesterovs_momentum()
  {
    return nesterovs_momentum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNesterovs_momentum(BOOL newNesterovs_momentum, NotificationChain msgs)
  {
    BOOL oldNesterovs_momentum = nesterovs_momentum;
    nesterovs_momentum = newNesterovs_momentum;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM, oldNesterovs_momentum, newNesterovs_momentum);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNesterovs_momentum(BOOL newNesterovs_momentum)
  {
    if (newNesterovs_momentum != nesterovs_momentum)
    {
      NotificationChain msgs = null;
      if (nesterovs_momentum != null)
        msgs = ((InternalEObject)nesterovs_momentum).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM, null, msgs);
      if (newNesterovs_momentum != null)
        msgs = ((InternalEObject)newNesterovs_momentum).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM, null, msgs);
      msgs = basicSetNesterovs_momentum(newNesterovs_momentum, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM, newNesterovs_momentum, newNesterovs_momentum));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEarly_stopping_def()
  {
    return early_stopping_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEarly_stopping_def(boolean newEarly_stopping_def)
  {
    boolean oldEarly_stopping_def = early_stopping_def;
    early_stopping_def = newEarly_stopping_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING_DEF, oldEarly_stopping_def, early_stopping_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOL getEarly_stopping()
  {
    return early_stopping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEarly_stopping(BOOL newEarly_stopping, NotificationChain msgs)
  {
    BOOL oldEarly_stopping = early_stopping;
    early_stopping = newEarly_stopping;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING, oldEarly_stopping, newEarly_stopping);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEarly_stopping(BOOL newEarly_stopping)
  {
    if (newEarly_stopping != early_stopping)
    {
      NotificationChain msgs = null;
      if (early_stopping != null)
        msgs = ((InternalEObject)early_stopping).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING, null, msgs);
      if (newEarly_stopping != null)
        msgs = ((InternalEObject)newEarly_stopping).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING, null, msgs);
      msgs = basicSetEarly_stopping(newEarly_stopping, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING, newEarly_stopping, newEarly_stopping));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isValidation_fraction_def()
  {
    return validation_fraction_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValidation_fraction_def(boolean newValidation_fraction_def)
  {
    boolean oldValidation_fraction_def = validation_fraction_def;
    validation_fraction_def = newValidation_fraction_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION_DEF, oldValidation_fraction_def, validation_fraction_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getValidation_fraction()
  {
    return validation_fraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValidation_fraction(FLOAT newValidation_fraction, NotificationChain msgs)
  {
    FLOAT oldValidation_fraction = validation_fraction;
    validation_fraction = newValidation_fraction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION, oldValidation_fraction, newValidation_fraction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValidation_fraction(FLOAT newValidation_fraction)
  {
    if (newValidation_fraction != validation_fraction)
    {
      NotificationChain msgs = null;
      if (validation_fraction != null)
        msgs = ((InternalEObject)validation_fraction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION, null, msgs);
      if (newValidation_fraction != null)
        msgs = ((InternalEObject)newValidation_fraction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION, null, msgs);
      msgs = basicSetValidation_fraction(newValidation_fraction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION, newValidation_fraction, newValidation_fraction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBeta_1_def()
  {
    return beta_1_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBeta_1_def(boolean newBeta_1_def)
  {
    boolean oldBeta_1_def = beta_1_def;
    beta_1_def = newBeta_1_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__BETA_1DEF, oldBeta_1_def, beta_1_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getBeta_1()
  {
    return beta_1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBeta_1(FLOAT newBeta_1, NotificationChain msgs)
  {
    FLOAT oldBeta_1 = beta_1;
    beta_1 = newBeta_1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__BETA_1, oldBeta_1, newBeta_1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBeta_1(FLOAT newBeta_1)
  {
    if (newBeta_1 != beta_1)
    {
      NotificationChain msgs = null;
      if (beta_1 != null)
        msgs = ((InternalEObject)beta_1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__BETA_1, null, msgs);
      if (newBeta_1 != null)
        msgs = ((InternalEObject)newBeta_1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__BETA_1, null, msgs);
      msgs = basicSetBeta_1(newBeta_1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__BETA_1, newBeta_1, newBeta_1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBeta_2_def()
  {
    return beta_2_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBeta_2_def(boolean newBeta_2_def)
  {
    boolean oldBeta_2_def = beta_2_def;
    beta_2_def = newBeta_2_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__BETA_2DEF, oldBeta_2_def, beta_2_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getBeta_2()
  {
    return beta_2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBeta_2(FLOAT newBeta_2, NotificationChain msgs)
  {
    FLOAT oldBeta_2 = beta_2;
    beta_2 = newBeta_2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__BETA_2, oldBeta_2, newBeta_2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBeta_2(FLOAT newBeta_2)
  {
    if (newBeta_2 != beta_2)
    {
      NotificationChain msgs = null;
      if (beta_2 != null)
        msgs = ((InternalEObject)beta_2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__BETA_2, null, msgs);
      if (newBeta_2 != null)
        msgs = ((InternalEObject)newBeta_2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__BETA_2, null, msgs);
      msgs = basicSetBeta_2(newBeta_2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__BETA_2, newBeta_2, newBeta_2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEpsilon_def()
  {
    return epsilon_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEpsilon_def(boolean newEpsilon_def)
  {
    boolean oldEpsilon_def = epsilon_def;
    epsilon_def = newEpsilon_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__EPSILON_DEF, oldEpsilon_def, epsilon_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT getEpsilon()
  {
    return epsilon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEpsilon(FLOAT newEpsilon, NotificationChain msgs)
  {
    FLOAT oldEpsilon = epsilon;
    epsilon = newEpsilon;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__EPSILON, oldEpsilon, newEpsilon);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEpsilon(FLOAT newEpsilon)
  {
    if (newEpsilon != epsilon)
    {
      NotificationChain msgs = null;
      if (epsilon != null)
        msgs = ((InternalEObject)epsilon).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__EPSILON, null, msgs);
      if (newEpsilon != null)
        msgs = ((InternalEObject)newEpsilon).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.MLP_CLASSIFIER__EPSILON, null, msgs);
      msgs = basicSetEpsilon(newEpsilon, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__EPSILON, newEpsilon, newEpsilon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isN_iter_no_change_def()
  {
    return n_iter_no_change_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setN_iter_no_change_def(boolean newN_iter_no_change_def)
  {
    boolean oldN_iter_no_change_def = n_iter_no_change_def;
    n_iter_no_change_def = newN_iter_no_change_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE_DEF, oldN_iter_no_change_def, n_iter_no_change_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getN_iter_no_change()
  {
    return n_iter_no_change;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setN_iter_no_change(int newN_iter_no_change)
  {
    int oldN_iter_no_change = n_iter_no_change;
    n_iter_no_change = newN_iter_no_change;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE, oldN_iter_no_change, n_iter_no_change));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMax_fun_def()
  {
    return max_fun_def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMax_fun_def(boolean newMax_fun_def)
  {
    boolean oldMax_fun_def = max_fun_def;
    max_fun_def = newMax_fun_def;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN_DEF, oldMax_fun_def, max_fun_def));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMax_fun()
  {
    return max_fun;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMax_fun(int newMax_fun)
  {
    int oldMax_fun = max_fun;
    max_fun = newMax_fun;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN, oldMax_fun, max_fun));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA:
        return basicSetAlpha(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT:
        return basicSetLearning_rate_init(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_T:
        return basicSetPower_t(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER:
        return basicSetMax_iter(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE:
        return basicSetShuffle(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE:
        return basicSetTolerance(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE:
        return basicSetVerbose(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START:
        return basicSetWarm_start(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM:
        return basicSetMomentum(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM:
        return basicSetNesterovs_momentum(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING:
        return basicSetEarly_stopping(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION:
        return basicSetValidation_fraction(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1:
        return basicSetBeta_1(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2:
        return basicSetBeta_2(null, msgs);
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON:
        return basicSetEpsilon(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES_DEF:
        return isHidden_layer_sizes_def();
      case PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES:
        return getHidden_layer_sizes();
      case PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION_DEF:
        return isActivation_def();
      case PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION:
        return getActivation();
      case PerfectMLPackage.MLP_CLASSIFIER__SOLVER_DEF:
        return isSolver_def();
      case PerfectMLPackage.MLP_CLASSIFIER__SOLVER:
        return getSolver();
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA_DEF:
        return isAlpha_def();
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA:
        return getAlpha();
      case PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE_DEF:
        return isBatch_size_def();
      case PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE:
        return getBatch_size();
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_DEF:
        return isLearning_rate_def();
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE:
        return getLearning_rate();
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT_DEF:
        return isLearning_rate_init_def();
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT:
        return getLearning_rate_init();
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_TDEF:
        return isPower_t_def();
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_T:
        return getPower_t();
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITEER_DEF:
        return isMax_iteer_def();
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER:
        return getMax_iter();
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE_DEF:
        return isShuffle_def();
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE:
        return getShuffle();
      case PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE_DEF:
        return isRandom_state_def();
      case PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE:
        return getRandom_state();
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE_DEF:
        return isTolerance_def();
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE:
        return getTolerance();
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE_DEF:
        return isVerbose_def();
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE:
        return getVerbose();
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START_DEF:
        return isWarm_start_def();
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START:
        return getWarm_start();
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM_DEF:
        return isMomentum_def();
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM:
        return getMomentum();
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM_DEF:
        return isNesterovs_momentum_def();
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM:
        return getNesterovs_momentum();
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING_DEF:
        return isEarly_stopping_def();
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING:
        return getEarly_stopping();
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION_DEF:
        return isValidation_fraction_def();
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION:
        return getValidation_fraction();
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1DEF:
        return isBeta_1_def();
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1:
        return getBeta_1();
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2DEF:
        return isBeta_2_def();
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2:
        return getBeta_2();
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON_DEF:
        return isEpsilon_def();
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON:
        return getEpsilon();
      case PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE_DEF:
        return isN_iter_no_change_def();
      case PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE:
        return getN_iter_no_change();
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN_DEF:
        return isMax_fun_def();
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN:
        return getMax_fun();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES_DEF:
        setHidden_layer_sizes_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES:
        getHidden_layer_sizes().clear();
        getHidden_layer_sizes().addAll((Collection<? extends Integer>)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION_DEF:
        setActivation_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION:
        setActivation((String)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__SOLVER_DEF:
        setSolver_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__SOLVER:
        setSolver((String)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA_DEF:
        setAlpha_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA:
        setAlpha((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE_DEF:
        setBatch_size_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE:
        setBatch_size((Integer)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_DEF:
        setLearning_rate_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE:
        setLearning_rate((String)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT_DEF:
        setLearning_rate_init_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT:
        setLearning_rate_init((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_TDEF:
        setPower_t_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_T:
        setPower_t((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITEER_DEF:
        setMax_iteer_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER:
        setMax_iter((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE_DEF:
        setShuffle_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE:
        setShuffle((BOOL)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE_DEF:
        setRandom_state_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE:
        setRandom_state((Integer)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE_DEF:
        setTolerance_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE:
        setTolerance((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE_DEF:
        setVerbose_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE:
        setVerbose((BOOL)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START_DEF:
        setWarm_start_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START:
        setWarm_start((BOOL)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM_DEF:
        setMomentum_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM:
        setMomentum((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM_DEF:
        setNesterovs_momentum_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM:
        setNesterovs_momentum((BOOL)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING_DEF:
        setEarly_stopping_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING:
        setEarly_stopping((BOOL)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION_DEF:
        setValidation_fraction_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION:
        setValidation_fraction((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1DEF:
        setBeta_1_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1:
        setBeta_1((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2DEF:
        setBeta_2_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2:
        setBeta_2((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON_DEF:
        setEpsilon_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON:
        setEpsilon((FLOAT)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE_DEF:
        setN_iter_no_change_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE:
        setN_iter_no_change((Integer)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN_DEF:
        setMax_fun_def((Boolean)newValue);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN:
        setMax_fun((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES_DEF:
        setHidden_layer_sizes_def(HIDDEN_LAYER_SIZES_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES:
        getHidden_layer_sizes().clear();
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION_DEF:
        setActivation_def(ACTIVATION_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION:
        setActivation(ACTIVATION_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__SOLVER_DEF:
        setSolver_def(SOLVER_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__SOLVER:
        setSolver(SOLVER_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA_DEF:
        setAlpha_def(ALPHA_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA:
        setAlpha((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE_DEF:
        setBatch_size_def(BATCH_SIZE_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE:
        setBatch_size(BATCH_SIZE_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_DEF:
        setLearning_rate_def(LEARNING_RATE_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE:
        setLearning_rate(LEARNING_RATE_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT_DEF:
        setLearning_rate_init_def(LEARNING_RATE_INIT_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT:
        setLearning_rate_init((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_TDEF:
        setPower_t_def(POWER_TDEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_T:
        setPower_t((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITEER_DEF:
        setMax_iteer_def(MAX_ITEER_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER:
        setMax_iter((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE_DEF:
        setShuffle_def(SHUFFLE_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE:
        setShuffle((BOOL)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE_DEF:
        setRandom_state_def(RANDOM_STATE_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE:
        setRandom_state(RANDOM_STATE_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE_DEF:
        setTolerance_def(TOLERANCE_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE:
        setTolerance((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE_DEF:
        setVerbose_def(VERBOSE_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE:
        setVerbose((BOOL)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START_DEF:
        setWarm_start_def(WARM_START_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START:
        setWarm_start((BOOL)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM_DEF:
        setMomentum_def(MOMENTUM_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM:
        setMomentum((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM_DEF:
        setNesterovs_momentum_def(NESTEROVS_MOMENTUM_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM:
        setNesterovs_momentum((BOOL)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING_DEF:
        setEarly_stopping_def(EARLY_STOPPING_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING:
        setEarly_stopping((BOOL)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION_DEF:
        setValidation_fraction_def(VALIDATION_FRACTION_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION:
        setValidation_fraction((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1DEF:
        setBeta_1_def(BETA_1DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1:
        setBeta_1((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2DEF:
        setBeta_2_def(BETA_2DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2:
        setBeta_2((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON_DEF:
        setEpsilon_def(EPSILON_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON:
        setEpsilon((FLOAT)null);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE_DEF:
        setN_iter_no_change_def(NITER_NO_CHANGE_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE:
        setN_iter_no_change(NITER_NO_CHANGE_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN_DEF:
        setMax_fun_def(MAX_FUN_DEF_EDEFAULT);
        return;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN:
        setMax_fun(MAX_FUN_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES_DEF:
        return hidden_layer_sizes_def != HIDDEN_LAYER_SIZES_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__HIDDEN_LAYER_SIZES:
        return hidden_layer_sizes != null && !hidden_layer_sizes.isEmpty();
      case PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION_DEF:
        return activation_def != ACTIVATION_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__ACTIVATION:
        return ACTIVATION_EDEFAULT == null ? activation != null : !ACTIVATION_EDEFAULT.equals(activation);
      case PerfectMLPackage.MLP_CLASSIFIER__SOLVER_DEF:
        return solver_def != SOLVER_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__SOLVER:
        return SOLVER_EDEFAULT == null ? solver != null : !SOLVER_EDEFAULT.equals(solver);
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA_DEF:
        return alpha_def != ALPHA_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__ALPHA:
        return alpha != null;
      case PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE_DEF:
        return batch_size_def != BATCH_SIZE_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__BATCH_SIZE:
        return batch_size != BATCH_SIZE_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_DEF:
        return learning_rate_def != LEARNING_RATE_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE:
        return LEARNING_RATE_EDEFAULT == null ? learning_rate != null : !LEARNING_RATE_EDEFAULT.equals(learning_rate);
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT_DEF:
        return learning_rate_init_def != LEARNING_RATE_INIT_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__LEARNING_RATE_INIT:
        return learning_rate_init != null;
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_TDEF:
        return power_t_def != POWER_TDEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__POWER_T:
        return power_t != null;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITEER_DEF:
        return max_iteer_def != MAX_ITEER_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_ITER:
        return max_iter != null;
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE_DEF:
        return shuffle_def != SHUFFLE_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__SHUFFLE:
        return shuffle != null;
      case PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE_DEF:
        return random_state_def != RANDOM_STATE_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__RANDOM_STATE:
        return random_state != RANDOM_STATE_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE_DEF:
        return tolerance_def != TOLERANCE_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__TOLERANCE:
        return tolerance != null;
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE_DEF:
        return verbose_def != VERBOSE_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__VERBOSE:
        return verbose != null;
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START_DEF:
        return warm_start_def != WARM_START_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__WARM_START:
        return warm_start != null;
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM_DEF:
        return momentum_def != MOMENTUM_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__MOMENTUM:
        return momentum != null;
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM_DEF:
        return nesterovs_momentum_def != NESTEROVS_MOMENTUM_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__NESTEROVS_MOMENTUM:
        return nesterovs_momentum != null;
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING_DEF:
        return early_stopping_def != EARLY_STOPPING_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__EARLY_STOPPING:
        return early_stopping != null;
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION_DEF:
        return validation_fraction_def != VALIDATION_FRACTION_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__VALIDATION_FRACTION:
        return validation_fraction != null;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1DEF:
        return beta_1_def != BETA_1DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_1:
        return beta_1 != null;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2DEF:
        return beta_2_def != BETA_2DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__BETA_2:
        return beta_2 != null;
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON_DEF:
        return epsilon_def != EPSILON_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__EPSILON:
        return epsilon != null;
      case PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE_DEF:
        return n_iter_no_change_def != NITER_NO_CHANGE_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__NITER_NO_CHANGE:
        return n_iter_no_change != NITER_NO_CHANGE_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN_DEF:
        return max_fun_def != MAX_FUN_DEF_EDEFAULT;
      case PerfectMLPackage.MLP_CLASSIFIER__MAX_FUN:
        return max_fun != MAX_FUN_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (hidden_layer_sizes_def: ");
    result.append(hidden_layer_sizes_def);
    result.append(", hidden_layer_sizes: ");
    result.append(hidden_layer_sizes);
    result.append(", activation_def: ");
    result.append(activation_def);
    result.append(", activation: ");
    result.append(activation);
    result.append(", solver_def: ");
    result.append(solver_def);
    result.append(", solver: ");
    result.append(solver);
    result.append(", alpha_def: ");
    result.append(alpha_def);
    result.append(", batch_size_def: ");
    result.append(batch_size_def);
    result.append(", batch_size: ");
    result.append(batch_size);
    result.append(", learning_rate_def: ");
    result.append(learning_rate_def);
    result.append(", learning_rate: ");
    result.append(learning_rate);
    result.append(", learning_rate_init_def: ");
    result.append(learning_rate_init_def);
    result.append(", power_t_def: ");
    result.append(power_t_def);
    result.append(", max_iteer_def: ");
    result.append(max_iteer_def);
    result.append(", shuffle_def: ");
    result.append(shuffle_def);
    result.append(", random_state_def: ");
    result.append(random_state_def);
    result.append(", random_state: ");
    result.append(random_state);
    result.append(", tolerance_def: ");
    result.append(tolerance_def);
    result.append(", verbose_def: ");
    result.append(verbose_def);
    result.append(", warm_start_def: ");
    result.append(warm_start_def);
    result.append(", momentum_def: ");
    result.append(momentum_def);
    result.append(", nesterovs_momentum_def: ");
    result.append(nesterovs_momentum_def);
    result.append(", early_stopping_def: ");
    result.append(early_stopping_def);
    result.append(", validation_fraction_def: ");
    result.append(validation_fraction_def);
    result.append(", beta_1_def: ");
    result.append(beta_1_def);
    result.append(", beta_2_def: ");
    result.append(beta_2_def);
    result.append(", epsilon_def: ");
    result.append(epsilon_def);
    result.append(", n_iter_no_change_def: ");
    result.append(n_iter_no_change_def);
    result.append(", n_iter_no_change: ");
    result.append(n_iter_no_change);
    result.append(", max_fun_def: ");
    result.append(max_fun_def);
    result.append(", max_fun: ");
    result.append(max_fun);
    result.append(')');
    return result.toString();
  }

} //MLPClassifierImpl
