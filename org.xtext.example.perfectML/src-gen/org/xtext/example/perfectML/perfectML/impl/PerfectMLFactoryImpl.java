/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.perfectML.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.perfectML.perfectML.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PerfectMLFactoryImpl extends EFactoryImpl implements PerfectMLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PerfectMLFactory init()
  {
    try
    {
      PerfectMLFactory thePerfectMLFactory = (PerfectMLFactory)EPackage.Registry.INSTANCE.getEFactory(PerfectMLPackage.eNS_URI);
      if (thePerfectMLFactory != null)
      {
        return thePerfectMLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PerfectMLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerfectMLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PerfectMLPackage.PERFECT_ML_FILE: return createPerfectMLFile();
      case PerfectMLPackage.PROGRAM: return createProgram();
      case PerfectMLPackage.INPUT: return createInput();
      case PerfectMLPackage.OUTPUT: return createOutput();
      case PerfectMLPackage.ALGORITHM: return createAlgorithm();
      case PerfectMLPackage.MLP_CLASSIFIER: return createMLPClassifier();
      case PerfectMLPackage.SVC: return createSVC();
      case PerfectMLPackage.KNEIGHBORS_CLASSIFIER: return createKNeighborsClassifier();
      case PerfectMLPackage.TRAINING_AMOUNT: return createTrainingAmount();
      case PerfectMLPackage.COLUMN_DECLARATIONS: return createColumnDeclarations();
      case PerfectMLPackage.COLUMN_SET: return createColumnSet();
      case PerfectMLPackage.BINOP: return createBinop();
      case PerfectMLPackage.FLOAT: return createFLOAT();
      case PerfectMLPackage.BOOL: return createBOOL();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PerfectMLFile createPerfectMLFile()
  {
    PerfectMLFileImpl perfectMLFile = new PerfectMLFileImpl();
    return perfectMLFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Output createOutput()
  {
    OutputImpl output = new OutputImpl();
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Algorithm createAlgorithm()
  {
    AlgorithmImpl algorithm = new AlgorithmImpl();
    return algorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MLPClassifier createMLPClassifier()
  {
    MLPClassifierImpl mlpClassifier = new MLPClassifierImpl();
    return mlpClassifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SVC createSVC()
  {
    SVCImpl svc = new SVCImpl();
    return svc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KNeighborsClassifier createKNeighborsClassifier()
  {
    KNeighborsClassifierImpl kNeighborsClassifier = new KNeighborsClassifierImpl();
    return kNeighborsClassifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TrainingAmount createTrainingAmount()
  {
    TrainingAmountImpl trainingAmount = new TrainingAmountImpl();
    return trainingAmount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnDeclarations createColumnDeclarations()
  {
    ColumnDeclarationsImpl columnDeclarations = new ColumnDeclarationsImpl();
    return columnDeclarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnSet createColumnSet()
  {
    ColumnSetImpl columnSet = new ColumnSetImpl();
    return columnSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Binop createBinop()
  {
    BinopImpl binop = new BinopImpl();
    return binop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FLOAT createFLOAT()
  {
    FLOATImpl float_ = new FLOATImpl();
    return float_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOL createBOOL()
  {
    BOOLImpl bool = new BOOLImpl();
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PerfectMLPackage getPerfectMLPackage()
  {
    return (PerfectMLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PerfectMLPackage getPackage()
  {
    return PerfectMLPackage.eINSTANCE;
  }

} //PerfectMLFactoryImpl
