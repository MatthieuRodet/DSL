/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.perfectML.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.perfectML.perfectML.Algorithm;
import org.xtext.example.perfectML.perfectML.ColumnDeclarations;
import org.xtext.example.perfectML.perfectML.Input;
import org.xtext.example.perfectML.perfectML.Output;
import org.xtext.example.perfectML.perfectML.PerfectMLPackage;
import org.xtext.example.perfectML.perfectML.Program;
import org.xtext.example.perfectML.perfectML.TrainingAmount;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.ProgramImpl#getInput <em>Input</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.ProgramImpl#getOutput <em>Output</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.ProgramImpl#getAlgo <em>Algo</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.ProgramImpl#getNbtraining <em>Nbtraining</em>}</li>
 *   <li>{@link org.xtext.example.perfectML.perfectML.impl.ProgramImpl#getColumn <em>Column</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProgramImpl extends MinimalEObjectImpl.Container implements Program
{
  /**
   * The cached value of the '{@link #getInput() <em>Input</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInput()
   * @generated
   * @ordered
   */
  protected Input input;

  /**
   * The cached value of the '{@link #getOutput() <em>Output</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutput()
   * @generated
   * @ordered
   */
  protected Output output;

  /**
   * The cached value of the '{@link #getAlgo() <em>Algo</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgo()
   * @generated
   * @ordered
   */
  protected Algorithm algo;

  /**
   * The cached value of the '{@link #getNbtraining() <em>Nbtraining</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNbtraining()
   * @generated
   * @ordered
   */
  protected TrainingAmount nbtraining;

  /**
   * The cached value of the '{@link #getColumn() <em>Column</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumn()
   * @generated
   * @ordered
   */
  protected ColumnDeclarations column;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PerfectMLPackage.Literals.PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input getInput()
  {
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInput(Input newInput, NotificationChain msgs)
  {
    Input oldInput = input;
    input = newInput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__INPUT, oldInput, newInput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInput(Input newInput)
  {
    if (newInput != input)
    {
      NotificationChain msgs = null;
      if (input != null)
        msgs = ((InternalEObject)input).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__INPUT, null, msgs);
      if (newInput != null)
        msgs = ((InternalEObject)newInput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__INPUT, null, msgs);
      msgs = basicSetInput(newInput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__INPUT, newInput, newInput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Output getOutput()
  {
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOutput(Output newOutput, NotificationChain msgs)
  {
    Output oldOutput = output;
    output = newOutput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__OUTPUT, oldOutput, newOutput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutput(Output newOutput)
  {
    if (newOutput != output)
    {
      NotificationChain msgs = null;
      if (output != null)
        msgs = ((InternalEObject)output).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__OUTPUT, null, msgs);
      if (newOutput != null)
        msgs = ((InternalEObject)newOutput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__OUTPUT, null, msgs);
      msgs = basicSetOutput(newOutput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__OUTPUT, newOutput, newOutput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Algorithm getAlgo()
  {
    return algo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlgo(Algorithm newAlgo, NotificationChain msgs)
  {
    Algorithm oldAlgo = algo;
    algo = newAlgo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__ALGO, oldAlgo, newAlgo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlgo(Algorithm newAlgo)
  {
    if (newAlgo != algo)
    {
      NotificationChain msgs = null;
      if (algo != null)
        msgs = ((InternalEObject)algo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__ALGO, null, msgs);
      if (newAlgo != null)
        msgs = ((InternalEObject)newAlgo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__ALGO, null, msgs);
      msgs = basicSetAlgo(newAlgo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__ALGO, newAlgo, newAlgo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TrainingAmount getNbtraining()
  {
    return nbtraining;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNbtraining(TrainingAmount newNbtraining, NotificationChain msgs)
  {
    TrainingAmount oldNbtraining = nbtraining;
    nbtraining = newNbtraining;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__NBTRAINING, oldNbtraining, newNbtraining);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNbtraining(TrainingAmount newNbtraining)
  {
    if (newNbtraining != nbtraining)
    {
      NotificationChain msgs = null;
      if (nbtraining != null)
        msgs = ((InternalEObject)nbtraining).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__NBTRAINING, null, msgs);
      if (newNbtraining != null)
        msgs = ((InternalEObject)newNbtraining).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__NBTRAINING, null, msgs);
      msgs = basicSetNbtraining(newNbtraining, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__NBTRAINING, newNbtraining, newNbtraining));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnDeclarations getColumn()
  {
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColumn(ColumnDeclarations newColumn, NotificationChain msgs)
  {
    ColumnDeclarations oldColumn = column;
    column = newColumn;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__COLUMN, oldColumn, newColumn);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColumn(ColumnDeclarations newColumn)
  {
    if (newColumn != column)
    {
      NotificationChain msgs = null;
      if (column != null)
        msgs = ((InternalEObject)column).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__COLUMN, null, msgs);
      if (newColumn != null)
        msgs = ((InternalEObject)newColumn).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PerfectMLPackage.PROGRAM__COLUMN, null, msgs);
      msgs = basicSetColumn(newColumn, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PerfectMLPackage.PROGRAM__COLUMN, newColumn, newColumn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PerfectMLPackage.PROGRAM__INPUT:
        return basicSetInput(null, msgs);
      case PerfectMLPackage.PROGRAM__OUTPUT:
        return basicSetOutput(null, msgs);
      case PerfectMLPackage.PROGRAM__ALGO:
        return basicSetAlgo(null, msgs);
      case PerfectMLPackage.PROGRAM__NBTRAINING:
        return basicSetNbtraining(null, msgs);
      case PerfectMLPackage.PROGRAM__COLUMN:
        return basicSetColumn(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PerfectMLPackage.PROGRAM__INPUT:
        return getInput();
      case PerfectMLPackage.PROGRAM__OUTPUT:
        return getOutput();
      case PerfectMLPackage.PROGRAM__ALGO:
        return getAlgo();
      case PerfectMLPackage.PROGRAM__NBTRAINING:
        return getNbtraining();
      case PerfectMLPackage.PROGRAM__COLUMN:
        return getColumn();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PerfectMLPackage.PROGRAM__INPUT:
        setInput((Input)newValue);
        return;
      case PerfectMLPackage.PROGRAM__OUTPUT:
        setOutput((Output)newValue);
        return;
      case PerfectMLPackage.PROGRAM__ALGO:
        setAlgo((Algorithm)newValue);
        return;
      case PerfectMLPackage.PROGRAM__NBTRAINING:
        setNbtraining((TrainingAmount)newValue);
        return;
      case PerfectMLPackage.PROGRAM__COLUMN:
        setColumn((ColumnDeclarations)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PerfectMLPackage.PROGRAM__INPUT:
        setInput((Input)null);
        return;
      case PerfectMLPackage.PROGRAM__OUTPUT:
        setOutput((Output)null);
        return;
      case PerfectMLPackage.PROGRAM__ALGO:
        setAlgo((Algorithm)null);
        return;
      case PerfectMLPackage.PROGRAM__NBTRAINING:
        setNbtraining((TrainingAmount)null);
        return;
      case PerfectMLPackage.PROGRAM__COLUMN:
        setColumn((ColumnDeclarations)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PerfectMLPackage.PROGRAM__INPUT:
        return input != null;
      case PerfectMLPackage.PROGRAM__OUTPUT:
        return output != null;
      case PerfectMLPackage.PROGRAM__ALGO:
        return algo != null;
      case PerfectMLPackage.PROGRAM__NBTRAINING:
        return nbtraining != null;
      case PerfectMLPackage.PROGRAM__COLUMN:
        return column != null;
    }
    return super.eIsSet(featureID);
  }

} //ProgramImpl
