/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.perfectML.ide.contentassist.antlr.internal.InternalPerfectMLParser;
import org.xtext.example.perfectML.services.PerfectMLGrammarAccess;

public class PerfectMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PerfectMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PerfectMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAlgorithmAccess().getAlternatives_1(), "rule__Algorithm__Alternatives_1");
			builder.put(grammarAccess.getMLPClassifierAccess().getActivationAlternatives_4_2_0(), "rule__MLPClassifier__ActivationAlternatives_4_2_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getSolverAlternatives_5_2_0(), "rule__MLPClassifier__SolverAlternatives_5_2_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getLearning_rateAlternatives_8_2_0(), "rule__MLPClassifier__Learning_rateAlternatives_8_2_0");
			builder.put(grammarAccess.getSVCAccess().getKernelAlternatives_4_2_0(), "rule__SVC__KernelAlternatives_4_2_0");
			builder.put(grammarAccess.getSVCAccess().getGammaAlternatives_6_2_0(), "rule__SVC__GammaAlternatives_6_2_0");
			builder.put(grammarAccess.getSVCAccess().getDecision_function_shapeAlternatives_14_2_0(), "rule__SVC__Decision_function_shapeAlternatives_14_2_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getWeightsAlternatives_4_2_0(), "rule__KNeighborsClassifier__WeightsAlternatives_4_2_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getAlgorithmAlternatives_5_2_0(), "rule__KNeighborsClassifier__AlgorithmAlternatives_5_2_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getMetricAlternatives_8_2_0(), "rule__KNeighborsClassifier__MetricAlternatives_8_2_0");
			builder.put(grammarAccess.getTrainingAmountAccess().getAlternatives_2(), "rule__TrainingAmount__Alternatives_2");
			builder.put(grammarAccess.getColumnSetAccess().getAlternatives(), "rule__ColumnSet__Alternatives");
			builder.put(grammarAccess.getBinopAccess().getAlternatives(), "rule__Binop__Alternatives");
			builder.put(grammarAccess.getBOOLAccess().getAlternatives(), "rule__BOOL__Alternatives");
			builder.put(grammarAccess.getPerfectMLFileAccess().getGroup(), "rule__PerfectMLFile__Group__0");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup(), "rule__Algorithm__Group__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup(), "rule__MLPClassifier__Group__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_3(), "rule__MLPClassifier__Group_3__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_3_4(), "rule__MLPClassifier__Group_3_4__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_4(), "rule__MLPClassifier__Group_4__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_5(), "rule__MLPClassifier__Group_5__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_6(), "rule__MLPClassifier__Group_6__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_7(), "rule__MLPClassifier__Group_7__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_8(), "rule__MLPClassifier__Group_8__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_9(), "rule__MLPClassifier__Group_9__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_10(), "rule__MLPClassifier__Group_10__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_11(), "rule__MLPClassifier__Group_11__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_12(), "rule__MLPClassifier__Group_12__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_13(), "rule__MLPClassifier__Group_13__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_14(), "rule__MLPClassifier__Group_14__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_15(), "rule__MLPClassifier__Group_15__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_16(), "rule__MLPClassifier__Group_16__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_17(), "rule__MLPClassifier__Group_17__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_18(), "rule__MLPClassifier__Group_18__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_19(), "rule__MLPClassifier__Group_19__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_20(), "rule__MLPClassifier__Group_20__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_21(), "rule__MLPClassifier__Group_21__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_22(), "rule__MLPClassifier__Group_22__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_23(), "rule__MLPClassifier__Group_23__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_24(), "rule__MLPClassifier__Group_24__0");
			builder.put(grammarAccess.getMLPClassifierAccess().getGroup_25(), "rule__MLPClassifier__Group_25__0");
			builder.put(grammarAccess.getSVCAccess().getGroup(), "rule__SVC__Group__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_3(), "rule__SVC__Group_3__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_4(), "rule__SVC__Group_4__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_5(), "rule__SVC__Group_5__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_6(), "rule__SVC__Group_6__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_7(), "rule__SVC__Group_7__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_8(), "rule__SVC__Group_8__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_9(), "rule__SVC__Group_9__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_10(), "rule__SVC__Group_10__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_11(), "rule__SVC__Group_11__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_12(), "rule__SVC__Group_12__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_13(), "rule__SVC__Group_13__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_14(), "rule__SVC__Group_14__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_15(), "rule__SVC__Group_15__0");
			builder.put(grammarAccess.getSVCAccess().getGroup_16(), "rule__SVC__Group_16__0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getGroup(), "rule__KNeighborsClassifier__Group__0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getGroup_3(), "rule__KNeighborsClassifier__Group_3__0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getGroup_4(), "rule__KNeighborsClassifier__Group_4__0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getGroup_5(), "rule__KNeighborsClassifier__Group_5__0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getGroup_6(), "rule__KNeighborsClassifier__Group_6__0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getGroup_7(), "rule__KNeighborsClassifier__Group_7__0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getGroup_8(), "rule__KNeighborsClassifier__Group_8__0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getGroup_9(), "rule__KNeighborsClassifier__Group_9__0");
			builder.put(grammarAccess.getTrainingAmountAccess().getGroup(), "rule__TrainingAmount__Group__0");
			builder.put(grammarAccess.getTrainingAmountAccess().getGroup_2_1(), "rule__TrainingAmount__Group_2_1__0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getGroup(), "rule__ColumnDeclarations__Group__0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getGroup_4(), "rule__ColumnDeclarations__Group_4__0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getGroup_5(), "rule__ColumnDeclarations__Group_5__0");
			builder.put(grammarAccess.getColumnSetAccess().getGroup_0(), "rule__ColumnSet__Group_0__0");
			builder.put(grammarAccess.getColumnSetAccess().getGroup_1(), "rule__ColumnSet__Group_1__0");
			builder.put(grammarAccess.getColumnSetAccess().getGroup_2(), "rule__ColumnSet__Group_2__0");
			builder.put(grammarAccess.getColumnSetAccess().getGroup_2_1(), "rule__ColumnSet__Group_2_1__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getPerfectMLFileAccess().getProgramsAssignment_0(), "rule__PerfectMLFile__ProgramsAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getInputAssignment_0(), "rule__Program__InputAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getOutputAssignment_1(), "rule__Program__OutputAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getAlgoAssignment_2(), "rule__Program__AlgoAssignment_2");
			builder.put(grammarAccess.getProgramAccess().getNbtrainingAssignment_3(), "rule__Program__NbtrainingAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getColumnAssignment_4(), "rule__Program__ColumnAssignment_4");
			builder.put(grammarAccess.getInputAccess().getPATHAssignment_4(), "rule__Input__PATHAssignment_4");
			builder.put(grammarAccess.getOutputAccess().getPATHAssignment_4(), "rule__Output__PATHAssignment_4");
			builder.put(grammarAccess.getMLPClassifierAccess().getHidden_layer_sizes_defAssignment_3_0(), "rule__MLPClassifier__Hidden_layer_sizes_defAssignment_3_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getHidden_layer_sizesAssignment_3_3(), "rule__MLPClassifier__Hidden_layer_sizesAssignment_3_3");
			builder.put(grammarAccess.getMLPClassifierAccess().getHidden_layer_sizesAssignment_3_4_1(), "rule__MLPClassifier__Hidden_layer_sizesAssignment_3_4_1");
			builder.put(grammarAccess.getMLPClassifierAccess().getActivation_defAssignment_4_0(), "rule__MLPClassifier__Activation_defAssignment_4_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getActivationAssignment_4_2(), "rule__MLPClassifier__ActivationAssignment_4_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getSolver_defAssignment_5_0(), "rule__MLPClassifier__Solver_defAssignment_5_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getSolverAssignment_5_2(), "rule__MLPClassifier__SolverAssignment_5_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getAlpha_defAssignment_6_0(), "rule__MLPClassifier__Alpha_defAssignment_6_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getAlphaAssignment_6_2(), "rule__MLPClassifier__AlphaAssignment_6_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getBatch_size_defAssignment_7_0(), "rule__MLPClassifier__Batch_size_defAssignment_7_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getBatch_sizeAssignment_7_2(), "rule__MLPClassifier__Batch_sizeAssignment_7_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getLearning_rate_defAssignment_8_0(), "rule__MLPClassifier__Learning_rate_defAssignment_8_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getLearning_rateAssignment_8_2(), "rule__MLPClassifier__Learning_rateAssignment_8_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getLearning_rate_init_defAssignment_9_0(), "rule__MLPClassifier__Learning_rate_init_defAssignment_9_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getLearning_rate_initAssignment_9_2(), "rule__MLPClassifier__Learning_rate_initAssignment_9_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getPower_t_defAssignment_10_0(), "rule__MLPClassifier__Power_t_defAssignment_10_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getPower_tAssignment_10_2(), "rule__MLPClassifier__Power_tAssignment_10_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getMax_iteer_defAssignment_11_0(), "rule__MLPClassifier__Max_iteer_defAssignment_11_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getMax_iterAssignment_11_2(), "rule__MLPClassifier__Max_iterAssignment_11_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getShuffle_defAssignment_12_0(), "rule__MLPClassifier__Shuffle_defAssignment_12_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getShuffleAssignment_12_2(), "rule__MLPClassifier__ShuffleAssignment_12_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getRandom_state_defAssignment_13_0(), "rule__MLPClassifier__Random_state_defAssignment_13_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getRandom_stateAssignment_13_2(), "rule__MLPClassifier__Random_stateAssignment_13_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getTolerance_defAssignment_14_0(), "rule__MLPClassifier__Tolerance_defAssignment_14_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getToleranceAssignment_14_2(), "rule__MLPClassifier__ToleranceAssignment_14_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getVerbose_defAssignment_15_0(), "rule__MLPClassifier__Verbose_defAssignment_15_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getVerboseAssignment_15_2(), "rule__MLPClassifier__VerboseAssignment_15_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getWarm_start_defAssignment_16_0(), "rule__MLPClassifier__Warm_start_defAssignment_16_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getWarm_startAssignment_16_2(), "rule__MLPClassifier__Warm_startAssignment_16_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getMomentum_defAssignment_17_0(), "rule__MLPClassifier__Momentum_defAssignment_17_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getMomentumAssignment_17_2(), "rule__MLPClassifier__MomentumAssignment_17_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getNesterovs_momentum_defAssignment_18_0(), "rule__MLPClassifier__Nesterovs_momentum_defAssignment_18_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getNesterovs_momentumAssignment_18_2(), "rule__MLPClassifier__Nesterovs_momentumAssignment_18_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getEarly_stopping_defAssignment_19_0(), "rule__MLPClassifier__Early_stopping_defAssignment_19_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getEarly_stoppingAssignment_19_2(), "rule__MLPClassifier__Early_stoppingAssignment_19_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getValidation_fraction_defAssignment_20_0(), "rule__MLPClassifier__Validation_fraction_defAssignment_20_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getValidation_fractionAssignment_20_2(), "rule__MLPClassifier__Validation_fractionAssignment_20_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getBeta_1_defAssignment_21_0(), "rule__MLPClassifier__Beta_1_defAssignment_21_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getBeta_1Assignment_21_2(), "rule__MLPClassifier__Beta_1Assignment_21_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getBeta_2_defAssignment_22_0(), "rule__MLPClassifier__Beta_2_defAssignment_22_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getBeta_2Assignment_22_2(), "rule__MLPClassifier__Beta_2Assignment_22_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getEpsilon_defAssignment_23_0(), "rule__MLPClassifier__Epsilon_defAssignment_23_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getEpsilonAssignment_23_2(), "rule__MLPClassifier__EpsilonAssignment_23_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getN_iter_no_change_defAssignment_24_0(), "rule__MLPClassifier__N_iter_no_change_defAssignment_24_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getN_iter_no_changeAssignment_24_2(), "rule__MLPClassifier__N_iter_no_changeAssignment_24_2");
			builder.put(grammarAccess.getMLPClassifierAccess().getMax_fun_defAssignment_25_0(), "rule__MLPClassifier__Max_fun_defAssignment_25_0");
			builder.put(grammarAccess.getMLPClassifierAccess().getMax_funAssignment_25_2(), "rule__MLPClassifier__Max_funAssignment_25_2");
			builder.put(grammarAccess.getSVCAccess().getC_defAssignment_3_0(), "rule__SVC__C_defAssignment_3_0");
			builder.put(grammarAccess.getSVCAccess().getCAssignment_3_2(), "rule__SVC__CAssignment_3_2");
			builder.put(grammarAccess.getSVCAccess().getKernel_defAssignment_4_0(), "rule__SVC__Kernel_defAssignment_4_0");
			builder.put(grammarAccess.getSVCAccess().getKernelAssignment_4_2(), "rule__SVC__KernelAssignment_4_2");
			builder.put(grammarAccess.getSVCAccess().getDegree_defAssignment_5_0(), "rule__SVC__Degree_defAssignment_5_0");
			builder.put(grammarAccess.getSVCAccess().getDegreeAssignment_5_2(), "rule__SVC__DegreeAssignment_5_2");
			builder.put(grammarAccess.getSVCAccess().getGamma_defAssignment_6_0(), "rule__SVC__Gamma_defAssignment_6_0");
			builder.put(grammarAccess.getSVCAccess().getGammaAssignment_6_2(), "rule__SVC__GammaAssignment_6_2");
			builder.put(grammarAccess.getSVCAccess().getCoef0_defAssignment_7_0(), "rule__SVC__Coef0_defAssignment_7_0");
			builder.put(grammarAccess.getSVCAccess().getCoef0Assignment_7_2(), "rule__SVC__Coef0Assignment_7_2");
			builder.put(grammarAccess.getSVCAccess().getShrinking_defAssignment_8_0(), "rule__SVC__Shrinking_defAssignment_8_0");
			builder.put(grammarAccess.getSVCAccess().getShrinkingAssignment_8_2(), "rule__SVC__ShrinkingAssignment_8_2");
			builder.put(grammarAccess.getSVCAccess().getProbability_defAssignment_9_0(), "rule__SVC__Probability_defAssignment_9_0");
			builder.put(grammarAccess.getSVCAccess().getProbabilityAssignment_9_2(), "rule__SVC__ProbabilityAssignment_9_2");
			builder.put(grammarAccess.getSVCAccess().getTol_defAssignment_10_0(), "rule__SVC__Tol_defAssignment_10_0");
			builder.put(grammarAccess.getSVCAccess().getTolAssignment_10_2(), "rule__SVC__TolAssignment_10_2");
			builder.put(grammarAccess.getSVCAccess().getCache_size_defAssignment_11_0(), "rule__SVC__Cache_size_defAssignment_11_0");
			builder.put(grammarAccess.getSVCAccess().getCache_sizeAssignment_11_2(), "rule__SVC__Cache_sizeAssignment_11_2");
			builder.put(grammarAccess.getSVCAccess().getVerbose_defAssignment_12_0(), "rule__SVC__Verbose_defAssignment_12_0");
			builder.put(grammarAccess.getSVCAccess().getVerboseAssignment_12_2(), "rule__SVC__VerboseAssignment_12_2");
			builder.put(grammarAccess.getSVCAccess().getMax_iter_defAssignment_13_0(), "rule__SVC__Max_iter_defAssignment_13_0");
			builder.put(grammarAccess.getSVCAccess().getMax_iterAssignment_13_2(), "rule__SVC__Max_iterAssignment_13_2");
			builder.put(grammarAccess.getSVCAccess().getDecision_function_shape_defAssignment_14_0(), "rule__SVC__Decision_function_shape_defAssignment_14_0");
			builder.put(grammarAccess.getSVCAccess().getDecision_function_shapeAssignment_14_2(), "rule__SVC__Decision_function_shapeAssignment_14_2");
			builder.put(grammarAccess.getSVCAccess().getBreak_ties_defAssignment_15_0(), "rule__SVC__Break_ties_defAssignment_15_0");
			builder.put(grammarAccess.getSVCAccess().getBreak_tiesAssignment_15_2(), "rule__SVC__Break_tiesAssignment_15_2");
			builder.put(grammarAccess.getSVCAccess().getRandom_state_defAssignment_16_0(), "rule__SVC__Random_state_defAssignment_16_0");
			builder.put(grammarAccess.getSVCAccess().getRandom_stateAssignment_16_2(), "rule__SVC__Random_stateAssignment_16_2");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getN_neighbors_defAssignment_3_0(), "rule__KNeighborsClassifier__N_neighbors_defAssignment_3_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getN_neighborsAssignment_3_2(), "rule__KNeighborsClassifier__N_neighborsAssignment_3_2");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getWeights_defAssignment_4_0(), "rule__KNeighborsClassifier__Weights_defAssignment_4_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getWeightsAssignment_4_2(), "rule__KNeighborsClassifier__WeightsAssignment_4_2");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getAlgorithm_defAssignment_5_0(), "rule__KNeighborsClassifier__Algorithm_defAssignment_5_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getAlgorithmAssignment_5_2(), "rule__KNeighborsClassifier__AlgorithmAssignment_5_2");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getLeaf_size_defAssignment_6_0(), "rule__KNeighborsClassifier__Leaf_size_defAssignment_6_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getLeaf_sizeAssignment_6_2(), "rule__KNeighborsClassifier__Leaf_sizeAssignment_6_2");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getP_defAssignment_7_0(), "rule__KNeighborsClassifier__P_defAssignment_7_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getPAssignment_7_2(), "rule__KNeighborsClassifier__PAssignment_7_2");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getMetric_defAssignment_8_0(), "rule__KNeighborsClassifier__Metric_defAssignment_8_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getMetricAssignment_8_2(), "rule__KNeighborsClassifier__MetricAssignment_8_2");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getN_jobs_defAssignment_9_0(), "rule__KNeighborsClassifier__N_jobs_defAssignment_9_0");
			builder.put(grammarAccess.getKNeighborsClassifierAccess().getN_jobsAssignment_9_2(), "rule__KNeighborsClassifier__N_jobsAssignment_9_2");
			builder.put(grammarAccess.getTrainingAmountAccess().getValueAssignment_1(), "rule__TrainingAmount__ValueAssignment_1");
			builder.put(grammarAccess.getTrainingAmountAccess().getPercentAssignment_2_0(), "rule__TrainingAmount__PercentAssignment_2_0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getTargetAssignment_4_0(), "rule__ColumnDeclarations__TargetAssignment_4_0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getTarget_defAssignment_4_2(), "rule__ColumnDeclarations__Target_defAssignment_4_2");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getPredictiveAssignment_5_0(), "rule__ColumnDeclarations__PredictiveAssignment_5_0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getPred_defAssignment_5_2(), "rule__ColumnDeclarations__Pred_defAssignment_5_2");
			builder.put(grammarAccess.getColumnSetAccess().getOpAssignment_0_0(), "rule__ColumnSet__OpAssignment_0_0");
			builder.put(grammarAccess.getColumnSetAccess().getArgBin1Assignment_0_1(), "rule__ColumnSet__ArgBin1Assignment_0_1");
			builder.put(grammarAccess.getColumnSetAccess().getOpTypeAssignment_0_3(), "rule__ColumnSet__OpTypeAssignment_0_3");
			builder.put(grammarAccess.getColumnSetAccess().getArgBin2Assignment_0_5(), "rule__ColumnSet__ArgBin2Assignment_0_5");
			builder.put(grammarAccess.getColumnSetAccess().getRangeAssignment_1_0(), "rule__ColumnSet__RangeAssignment_1_0");
			builder.put(grammarAccess.getColumnSetAccess().getArgR1Assignment_1_1(), "rule__ColumnSet__ArgR1Assignment_1_1");
			builder.put(grammarAccess.getColumnSetAccess().getArgR2Assignment_1_3(), "rule__ColumnSet__ArgR2Assignment_1_3");
			builder.put(grammarAccess.getColumnSetAccess().getListAssignment_2_0(), "rule__ColumnSet__ListAssignment_2_0");
			builder.put(grammarAccess.getColumnSetAccess().getArgListAssignment_2_1_0(), "rule__ColumnSet__ArgListAssignment_2_1_0");
			builder.put(grammarAccess.getColumnSetAccess().getArgListAssignment_2_2(), "rule__ColumnSet__ArgListAssignment_2_2");
			builder.put(grammarAccess.getBinopAccess().getTypeAssignment_0(), "rule__Binop__TypeAssignment_0");
			builder.put(grammarAccess.getBinopAccess().getTypeAssignment_1(), "rule__Binop__TypeAssignment_1");
			builder.put(grammarAccess.getFLOATAccess().getIntPartAssignment_0(), "rule__FLOAT__IntPartAssignment_0");
			builder.put(grammarAccess.getFLOATAccess().getDecPartAssignment_2(), "rule__FLOAT__DecPartAssignment_2");
			builder.put(grammarAccess.getBOOLAccess().getValueAssignment_0(), "rule__BOOL__ValueAssignment_0");
			builder.put(grammarAccess.getBOOLAccess().getValueAssignment_1(), "rule__BOOL__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PerfectMLGrammarAccess grammarAccess;

	@Override
	protected InternalPerfectMLParser createParser() {
		InternalPerfectMLParser result = new InternalPerfectMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PerfectMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PerfectMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
