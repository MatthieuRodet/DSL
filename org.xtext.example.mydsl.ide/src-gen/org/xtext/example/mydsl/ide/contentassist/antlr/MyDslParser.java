/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getColumnSetAccess().getAlternatives(), "rule__ColumnSet__Alternatives");
			builder.put(grammarAccess.getBinopAccess().getAlternatives(), "rule__Binop__Alternatives");
			builder.put(grammarAccess.getTargetPredictiveAccess().getAlternatives(), "rule__TargetPredictive__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBOOLAccess().getAlternatives(), "rule__BOOL__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup(), "rule__Algorithm__Group__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup_4(), "rule__Algorithm__Group_4__0");
			builder.put(grammarAccess.getParameterDeclarationAccess().getGroup(), "rule__ParameterDeclaration__Group__0");
			builder.put(grammarAccess.getParameterDeclarationAccess().getGroup_2(), "rule__ParameterDeclaration__Group_2__0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getGroup(), "rule__ColumnDeclarations__Group__0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getGroup_2(), "rule__ColumnDeclarations__Group_2__0");
			builder.put(grammarAccess.getAlgoDeclarationAccess().getGroup(), "rule__AlgoDeclaration__Group__0");
			builder.put(grammarAccess.getParaDeclarationAccess().getGroup(), "rule__ParaDeclaration__Group__0");
			builder.put(grammarAccess.getColumnDeclarationAccess().getGroup(), "rule__ColumnDeclaration__Group__0");
			builder.put(grammarAccess.getColumnSetAccess().getGroup_0(), "rule__ColumnSet__Group_0__0");
			builder.put(grammarAccess.getColumnSetAccess().getGroup_1(), "rule__ColumnSet__Group_1__0");
			builder.put(grammarAccess.getColumnSetAccess().getGroup_2(), "rule__ColumnSet__Group_2__0");
			builder.put(grammarAccess.getColumnSetAccess().getGroup_2_1(), "rule__ColumnSet__Group_2_1__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getProgramAccess().getBlocsFileAssignment_0(), "rule__Program__BlocsFileAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getBlocsAlgoAssignment_1(), "rule__Program__BlocsAlgoAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getBlocsParaAssignment_2(), "rule__Program__BlocsParaAssignment_2");
			builder.put(grammarAccess.getProgramAccess().getBlocsColuAssignment_3(), "rule__Program__BlocsColuAssignment_3");
			builder.put(grammarAccess.getFileAccess().getPATHAssignment_1(), "rule__File__PATHAssignment_1");
			builder.put(grammarAccess.getAlgorithmAccess().getNameAssignment_2(), "rule__Algorithm__NameAssignment_2");
			builder.put(grammarAccess.getAlgorithmAccess().getBlocAssignment_4_0(), "rule__Algorithm__BlocAssignment_4_0");
			builder.put(grammarAccess.getParameterDeclarationAccess().getBlocAssignment_2_0(), "rule__ParameterDeclaration__BlocAssignment_2_0");
			builder.put(grammarAccess.getColumnDeclarationsAccess().getBlocAssignment_2_0(), "rule__ColumnDeclarations__BlocAssignment_2_0");
			builder.put(grammarAccess.getAlgoDeclarationAccess().getNameAssignment_0(), "rule__AlgoDeclaration__NameAssignment_0");
			builder.put(grammarAccess.getAlgoDeclarationAccess().getValueAssignment_2(), "rule__AlgoDeclaration__ValueAssignment_2");
			builder.put(grammarAccess.getParaDeclarationAccess().getNameAssignment_0(), "rule__ParaDeclaration__NameAssignment_0");
			builder.put(grammarAccess.getParaDeclarationAccess().getValueAssignment_2(), "rule__ParaDeclaration__ValueAssignment_2");
			builder.put(grammarAccess.getColumnDeclarationAccess().getColumnsAssignment_0(), "rule__ColumnDeclaration__ColumnsAssignment_0");
			builder.put(grammarAccess.getColumnDeclarationAccess().getTypeAssignment_2(), "rule__ColumnDeclaration__TypeAssignment_2");
			builder.put(grammarAccess.getColumnSetAccess().getArgBin1Assignment_0_1(), "rule__ColumnSet__ArgBin1Assignment_0_1");
			builder.put(grammarAccess.getColumnSetAccess().getOpTypeAssignment_0_3(), "rule__ColumnSet__OpTypeAssignment_0_3");
			builder.put(grammarAccess.getColumnSetAccess().getArgBin2Assignment_0_5(), "rule__ColumnSet__ArgBin2Assignment_0_5");
			builder.put(grammarAccess.getColumnSetAccess().getArgR1Assignment_1_1(), "rule__ColumnSet__ArgR1Assignment_1_1");
			builder.put(grammarAccess.getColumnSetAccess().getArgR2Assignment_1_3(), "rule__ColumnSet__ArgR2Assignment_1_3");
			builder.put(grammarAccess.getColumnSetAccess().getArgListAssignment_2_1_0(), "rule__ColumnSet__ArgListAssignment_2_1_0");
			builder.put(grammarAccess.getColumnSetAccess().getArgListAssignment_2_2(), "rule__ColumnSet__ArgListAssignment_2_2");
			builder.put(grammarAccess.getBinopAccess().getTypeAssignment_0(), "rule__Binop__TypeAssignment_0");
			builder.put(grammarAccess.getBinopAccess().getTypeAssignment_1(), "rule__Binop__TypeAssignment_1");
			builder.put(grammarAccess.getTargetPredictiveAccess().getTypeAssignment_0(), "rule__TargetPredictive__TypeAssignment_0");
			builder.put(grammarAccess.getTargetPredictiveAccess().getTypeAssignment_1(), "rule__TargetPredictive__TypeAssignment_1");
			builder.put(grammarAccess.getValueAccess().getIntAssignment_0(), "rule__Value__IntAssignment_0");
			builder.put(grammarAccess.getValueAccess().getStrAssignment_1(), "rule__Value__StrAssignment_1");
			builder.put(grammarAccess.getValueAccess().getFloatAssignment_2(), "rule__Value__FloatAssignment_2");
			builder.put(grammarAccess.getValueAccess().getBoolAssignment_3(), "rule__Value__BoolAssignment_3");
			builder.put(grammarAccess.getFLOATAccess().getIntPartAssignment_0(), "rule__FLOAT__IntPartAssignment_0");
			builder.put(grammarAccess.getFLOATAccess().getDecPartAssignment_2(), "rule__FLOAT__DecPartAssignment_2");
			builder.put(grammarAccess.getBOOLAccess().getValueAssignment_0(), "rule__BOOL__ValueAssignment_0");
			builder.put(grammarAccess.getBOOLAccess().getValueAssignment_1(), "rule__BOOL__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
