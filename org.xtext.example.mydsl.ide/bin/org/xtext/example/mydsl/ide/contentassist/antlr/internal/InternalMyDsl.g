/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFile
entryRuleFile
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileAccess().getGroup()); }
		(rule__File__Group__0)
		{ after(grammarAccess.getFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm
:
{ before(grammarAccess.getAlgorithmRule()); }
	 ruleAlgorithm
{ after(grammarAccess.getAlgorithmRule()); } 
	 EOF 
;

// Rule Algorithm
ruleAlgorithm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgorithmAccess().getGroup()); }
		(rule__Algorithm__Group__0)
		{ after(grammarAccess.getAlgorithmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
		(rule__ParameterDeclaration__Group__0)
		{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumnDeclarations
entryRuleColumnDeclarations
:
{ before(grammarAccess.getColumnDeclarationsRule()); }
	 ruleColumnDeclarations
{ after(grammarAccess.getColumnDeclarationsRule()); } 
	 EOF 
;

// Rule ColumnDeclarations
ruleColumnDeclarations 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnDeclarationsAccess().getGroup()); }
		(rule__ColumnDeclarations__Group__0)
		{ after(grammarAccess.getColumnDeclarationsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgoDeclaration
entryRuleAlgoDeclaration
:
{ before(grammarAccess.getAlgoDeclarationRule()); }
	 ruleAlgoDeclaration
{ after(grammarAccess.getAlgoDeclarationRule()); } 
	 EOF 
;

// Rule AlgoDeclaration
ruleAlgoDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgoDeclarationAccess().getGroup()); }
		(rule__AlgoDeclaration__Group__0)
		{ after(grammarAccess.getAlgoDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParaDeclaration
entryRuleParaDeclaration
:
{ before(grammarAccess.getParaDeclarationRule()); }
	 ruleParaDeclaration
{ after(grammarAccess.getParaDeclarationRule()); } 
	 EOF 
;

// Rule ParaDeclaration
ruleParaDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParaDeclarationAccess().getGroup()); }
		(rule__ParaDeclaration__Group__0)
		{ after(grammarAccess.getParaDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumnDeclaration
entryRuleColumnDeclaration
:
{ before(grammarAccess.getColumnDeclarationRule()); }
	 ruleColumnDeclaration
{ after(grammarAccess.getColumnDeclarationRule()); } 
	 EOF 
;

// Rule ColumnDeclaration
ruleColumnDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnDeclarationAccess().getGroup()); }
		(rule__ColumnDeclaration__Group__0)
		{ after(grammarAccess.getColumnDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumnSet
entryRuleColumnSet
:
{ before(grammarAccess.getColumnSetRule()); }
	 ruleColumnSet
{ after(grammarAccess.getColumnSetRule()); } 
	 EOF 
;

// Rule ColumnSet
ruleColumnSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnSetAccess().getAlternatives()); }
		(rule__ColumnSet__Alternatives)
		{ after(grammarAccess.getColumnSetAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinop
entryRuleBinop
:
{ before(grammarAccess.getBinopRule()); }
	 ruleBinop
{ after(grammarAccess.getBinopRule()); } 
	 EOF 
;

// Rule Binop
ruleBinop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinopAccess().getAlternatives()); }
		(rule__Binop__Alternatives)
		{ after(grammarAccess.getBinopAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTargetPredictive
entryRuleTargetPredictive
:
{ before(grammarAccess.getTargetPredictiveRule()); }
	 ruleTargetPredictive
{ after(grammarAccess.getTargetPredictiveRule()); } 
	 EOF 
;

// Rule TargetPredictive
ruleTargetPredictive 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetPredictiveAccess().getAlternatives()); }
		(rule__TargetPredictive__Alternatives)
		{ after(grammarAccess.getTargetPredictiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFLOAT
entryRuleFLOAT
:
{ before(grammarAccess.getFLOATRule()); }
	 ruleFLOAT
{ after(grammarAccess.getFLOATRule()); } 
	 EOF 
;

// Rule FLOAT
ruleFLOAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFLOATAccess().getGroup()); }
		(rule__FLOAT__Group__0)
		{ after(grammarAccess.getFLOATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBOOL
entryRuleBOOL
:
{ before(grammarAccess.getBOOLRule()); }
	 ruleBOOL
{ after(grammarAccess.getBOOLRule()); } 
	 EOF 
;

// Rule BOOL
ruleBOOL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBOOLAccess().getAlternatives()); }
		(rule__BOOL__Alternatives)
		{ after(grammarAccess.getBOOLAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnSetAccess().getGroup_0()); }
		(rule__ColumnSet__Group_0__0)
		{ after(grammarAccess.getColumnSetAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getColumnSetAccess().getGroup_1()); }
		(rule__ColumnSet__Group_1__0)
		{ after(grammarAccess.getColumnSetAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getColumnSetAccess().getGroup_2()); }
		(rule__ColumnSet__Group_2__0)
		{ after(grammarAccess.getColumnSetAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinopAccess().getTypeAssignment_0()); }
		(rule__Binop__TypeAssignment_0)
		{ after(grammarAccess.getBinopAccess().getTypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinopAccess().getTypeAssignment_1()); }
		(rule__Binop__TypeAssignment_1)
		{ after(grammarAccess.getBinopAccess().getTypeAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetPredictive__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetPredictiveAccess().getTypeAssignment_0()); }
		(rule__TargetPredictive__TypeAssignment_0)
		{ after(grammarAccess.getTargetPredictiveAccess().getTypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTargetPredictiveAccess().getTypeAssignment_1()); }
		(rule__TargetPredictive__TypeAssignment_1)
		{ after(grammarAccess.getTargetPredictiveAccess().getTypeAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getIntAssignment_0()); }
		(rule__Value__IntAssignment_0)
		{ after(grammarAccess.getValueAccess().getIntAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getStrAssignment_1()); }
		(rule__Value__StrAssignment_1)
		{ after(grammarAccess.getValueAccess().getStrAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getFloatAssignment_2()); }
		(rule__Value__FloatAssignment_2)
		{ after(grammarAccess.getValueAccess().getFloatAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getBoolAssignment_3()); }
		(rule__Value__BoolAssignment_3)
		{ after(grammarAccess.getValueAccess().getBoolAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBOOLAccess().getValueAssignment_0()); }
		(rule__BOOL__ValueAssignment_0)
		{ after(grammarAccess.getBOOLAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBOOLAccess().getValueAssignment_1()); }
		(rule__BOOL__ValueAssignment_1)
		{ after(grammarAccess.getBOOLAccess().getValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getBlocsFileAssignment_0()); }
	(rule__Program__BlocsFileAssignment_0)
	{ after(grammarAccess.getProgramAccess().getBlocsFileAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getBlocsAlgoAssignment_1()); }
	(rule__Program__BlocsAlgoAssignment_1)
	{ after(grammarAccess.getProgramAccess().getBlocsAlgoAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getBlocsParaAssignment_2()); }
	(rule__Program__BlocsParaAssignment_2)
	{ after(grammarAccess.getProgramAccess().getBlocsParaAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getBlocsColuAssignment_3()); }
	(rule__Program__BlocsColuAssignment_3)
	{ after(grammarAccess.getProgramAccess().getBlocsColuAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__0__Impl
	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getUseSourceDataKeyword_0()); }
	'Use source data :'
	{ after(grammarAccess.getFileAccess().getUseSourceDataKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__1__Impl
	rule__File__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getPATHAssignment_1()); }
	(rule__File__PATHAssignment_1)
	{ after(grammarAccess.getFileAccess().getPATHAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getLineFeedKeyword_2()); }
	'\n'
	{ after(grammarAccess.getFileAccess().getLineFeedKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Algorithm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__0__Impl
	rule__Algorithm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getAlgorithmAction_0()); }
	()
	{ after(grammarAccess.getAlgorithmAccess().getAlgorithmAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__1__Impl
	rule__Algorithm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getUseAlgorithmKeyword_1()); }
	'Use algorithm'
	{ after(grammarAccess.getAlgorithmAccess().getUseAlgorithmKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__2__Impl
	rule__Algorithm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getNameAssignment_2()); }
	(rule__Algorithm__NameAssignment_2)
	{ after(grammarAccess.getAlgorithmAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__3__Impl
	rule__Algorithm__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getWithKeyword_3()); }
	'with\n'
	{ after(grammarAccess.getAlgorithmAccess().getWithKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getGroup_4()); }
	(rule__Algorithm__Group_4__0)*
	{ after(grammarAccess.getAlgorithmAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Algorithm__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group_4__0__Impl
	rule__Algorithm__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getBlocAssignment_4_0()); }
	(rule__Algorithm__BlocAssignment_4_0)
	{ after(grammarAccess.getAlgorithmAccess().getBlocAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getLineFeedKeyword_4_1()); }
	'\n'
	{ after(grammarAccess.getAlgorithmAccess().getLineFeedKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0()); }
	()
	{ after(grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__1__Impl
	rule__ParameterDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getUseParametersKeyword_1()); }
	'Use parameters :\n'
	{ after(grammarAccess.getParameterDeclarationAccess().getUseParametersKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getGroup_2()); }
	(rule__ParameterDeclaration__Group_2__0)*
	{ after(grammarAccess.getParameterDeclarationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group_2__0__Impl
	rule__ParameterDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getBlocAssignment_2_0()); }
	(rule__ParameterDeclaration__BlocAssignment_2_0)
	{ after(grammarAccess.getParameterDeclarationAccess().getBlocAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclarationAccess().getLineFeedKeyword_2_1()); }
	'\n'
	{ after(grammarAccess.getParameterDeclarationAccess().getLineFeedKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnDeclarations__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDeclarations__Group__0__Impl
	rule__ColumnDeclarations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDeclarationsAccess().getColumnDeclarationsAction_0()); }
	()
	{ after(grammarAccess.getColumnDeclarationsAccess().getColumnDeclarationsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDeclarations__Group__1__Impl
	rule__ColumnDeclarations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDeclarationsAccess().getUseColumnsKeyword_1()); }
	'Use columns :\n'
	{ after(grammarAccess.getColumnDeclarationsAccess().getUseColumnsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDeclarations__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDeclarationsAccess().getGroup_2()); }
	(rule__ColumnDeclarations__Group_2__0)*
	{ after(grammarAccess.getColumnDeclarationsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnDeclarations__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDeclarations__Group_2__0__Impl
	rule__ColumnDeclarations__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDeclarationsAccess().getBlocAssignment_2_0()); }
	(rule__ColumnDeclarations__BlocAssignment_2_0)
	{ after(grammarAccess.getColumnDeclarationsAccess().getBlocAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDeclarations__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDeclarationsAccess().getLineFeedKeyword_2_1()); }
	'\n'
	{ after(grammarAccess.getColumnDeclarationsAccess().getLineFeedKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AlgoDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AlgoDeclaration__Group__0__Impl
	rule__AlgoDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoDeclarationAccess().getNameAssignment_0()); }
	(rule__AlgoDeclaration__NameAssignment_0)
	{ after(grammarAccess.getAlgoDeclarationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AlgoDeclaration__Group__1__Impl
	rule__AlgoDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoDeclarationAccess().getAsKeyword_1()); }
	'as'
	{ after(grammarAccess.getAlgoDeclarationAccess().getAsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AlgoDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoDeclarationAccess().getValueAssignment_2()); }
	(rule__AlgoDeclaration__ValueAssignment_2)
	{ after(grammarAccess.getAlgoDeclarationAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParaDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParaDeclaration__Group__0__Impl
	rule__ParaDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParaDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParaDeclarationAccess().getNameAssignment_0()); }
	(rule__ParaDeclaration__NameAssignment_0)
	{ after(grammarAccess.getParaDeclarationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParaDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParaDeclaration__Group__1__Impl
	rule__ParaDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParaDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParaDeclarationAccess().getValuesKeyword_1()); }
	'values'
	{ after(grammarAccess.getParaDeclarationAccess().getValuesKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParaDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParaDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParaDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParaDeclarationAccess().getValueAssignment_2()); }
	(rule__ParaDeclaration__ValueAssignment_2)
	{ after(grammarAccess.getParaDeclarationAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDeclaration__Group__0__Impl
	rule__ColumnDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDeclarationAccess().getColumnsAssignment_0()); }
	(rule__ColumnDeclaration__ColumnsAssignment_0)
	{ after(grammarAccess.getColumnDeclarationAccess().getColumnsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDeclaration__Group__1__Impl
	rule__ColumnDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDeclarationAccess().getAsKeyword_1()); }
	'as'
	{ after(grammarAccess.getColumnDeclarationAccess().getAsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDeclarationAccess().getTypeAssignment_2()); }
	(rule__ColumnDeclaration__TypeAssignment_2)
	{ after(grammarAccess.getColumnDeclarationAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnSet__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_0__0__Impl
	rule__ColumnSet__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getColumnSetAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_0__1__Impl
	rule__ColumnSet__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getArgBin1Assignment_0_1()); }
	(rule__ColumnSet__ArgBin1Assignment_0_1)
	{ after(grammarAccess.getColumnSetAccess().getArgBin1Assignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_0__2__Impl
	rule__ColumnSet__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getColumnSetAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_0__3__Impl
	rule__ColumnSet__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getOpTypeAssignment_0_3()); }
	(rule__ColumnSet__OpTypeAssignment_0_3)
	{ after(grammarAccess.getColumnSetAccess().getOpTypeAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_0__4__Impl
	rule__ColumnSet__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getLeftParenthesisKeyword_0_4()); }
	'('
	{ after(grammarAccess.getColumnSetAccess().getLeftParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_0__5__Impl
	rule__ColumnSet__Group_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getArgBin2Assignment_0_5()); }
	(rule__ColumnSet__ArgBin2Assignment_0_5)
	{ after(grammarAccess.getColumnSetAccess().getArgBin2Assignment_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_0__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_0__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getRightParenthesisKeyword_0_6()); }
	')'
	{ after(grammarAccess.getColumnSetAccess().getRightParenthesisKeyword_0_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnSet__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_1__0__Impl
	rule__ColumnSet__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getFromKeyword_1_0()); }
	'From'
	{ after(grammarAccess.getColumnSetAccess().getFromKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_1__1__Impl
	rule__ColumnSet__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getArgR1Assignment_1_1()); }
	(rule__ColumnSet__ArgR1Assignment_1_1)
	{ after(grammarAccess.getColumnSetAccess().getArgR1Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_1__2__Impl
	rule__ColumnSet__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getToKeyword_1_2()); }
	'to'
	{ after(grammarAccess.getColumnSetAccess().getToKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getArgR2Assignment_1_3()); }
	(rule__ColumnSet__ArgR2Assignment_1_3)
	{ after(grammarAccess.getColumnSetAccess().getArgR2Assignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnSet__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_2__0__Impl
	rule__ColumnSet__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getLeftSquareBracketKeyword_2_0()); }
	'['
	{ after(grammarAccess.getColumnSetAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_2__1__Impl
	rule__ColumnSet__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getGroup_2_1()); }
	(rule__ColumnSet__Group_2_1__0)*
	{ after(grammarAccess.getColumnSetAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_2__2__Impl
	rule__ColumnSet__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getArgListAssignment_2_2()); }
	(rule__ColumnSet__ArgListAssignment_2_2)
	{ after(grammarAccess.getColumnSetAccess().getArgListAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getRightSquareBracketKeyword_2_3()); }
	']'
	{ after(grammarAccess.getColumnSetAccess().getRightSquareBracketKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnSet__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_2_1__0__Impl
	rule__ColumnSet__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getArgListAssignment_2_1_0()); }
	(rule__ColumnSet__ArgListAssignment_2_1_0)
	{ after(grammarAccess.getColumnSetAccess().getArgListAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnSet__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnSetAccess().getCommaKeyword_2_1_1()); }
	','
	{ after(grammarAccess.getColumnSetAccess().getCommaKeyword_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__0__Impl
	rule__FLOAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getIntPartAssignment_0()); }
	(rule__FLOAT__IntPartAssignment_0)
	{ after(grammarAccess.getFLOATAccess().getIntPartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__1__Impl
	rule__FLOAT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getDecPartAssignment_2()); }
	(rule__FLOAT__DecPartAssignment_2)
	{ after(grammarAccess.getFLOATAccess().getDecPartAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__BlocsFileAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getBlocsFileFileParserRuleCall_0_0()); }
		ruleFile
		{ after(grammarAccess.getProgramAccess().getBlocsFileFileParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__BlocsAlgoAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getBlocsAlgoAlgorithmParserRuleCall_1_0()); }
		ruleAlgorithm
		{ after(grammarAccess.getProgramAccess().getBlocsAlgoAlgorithmParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__BlocsParaAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getBlocsParaParameterDeclarationParserRuleCall_2_0()); }
		ruleParameterDeclaration
		{ after(grammarAccess.getProgramAccess().getBlocsParaParameterDeclarationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__BlocsColuAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getBlocsColuColumnDeclarationsParserRuleCall_3_0()); }
		ruleColumnDeclarations
		{ after(grammarAccess.getProgramAccess().getBlocsColuColumnDeclarationsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__PATHAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getPATHSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFileAccess().getPATHSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getAlgorithmAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__BlocAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getBlocAlgoDeclarationParserRuleCall_4_0_0()); }
		ruleAlgoDeclaration
		{ after(grammarAccess.getAlgorithmAccess().getBlocAlgoDeclarationParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__BlocAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterDeclarationAccess().getBlocParaDeclarationParserRuleCall_2_0_0()); }
		ruleParaDeclaration
		{ after(grammarAccess.getParameterDeclarationAccess().getBlocParaDeclarationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclarations__BlocAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnDeclarationsAccess().getBlocColumnDeclarationParserRuleCall_2_0_0()); }
		ruleColumnDeclaration
		{ after(grammarAccess.getColumnDeclarationsAccess().getBlocColumnDeclarationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoDeclaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgoDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAlgoDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoDeclaration__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgoDeclarationAccess().getValueValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getAlgoDeclarationAccess().getValueValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParaDeclaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParaDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParaDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParaDeclaration__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParaDeclarationAccess().getValueValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getParaDeclarationAccess().getValueValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclaration__ColumnsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnDeclarationAccess().getColumnsColumnSetParserRuleCall_0_0()); }
		ruleColumnSet
		{ after(grammarAccess.getColumnDeclarationAccess().getColumnsColumnSetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDeclaration__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnDeclarationAccess().getTypeTargetPredictiveParserRuleCall_2_0()); }
		ruleTargetPredictive
		{ after(grammarAccess.getColumnDeclarationAccess().getTypeTargetPredictiveParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__ArgBin1Assignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnSetAccess().getArgBin1ColumnSetParserRuleCall_0_1_0()); }
		ruleColumnSet
		{ after(grammarAccess.getColumnSetAccess().getArgBin1ColumnSetParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__OpTypeAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnSetAccess().getOpTypeBinopParserRuleCall_0_3_0()); }
		ruleBinop
		{ after(grammarAccess.getColumnSetAccess().getOpTypeBinopParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__ArgBin2Assignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnSetAccess().getArgBin2ColumnSetParserRuleCall_0_5_0()); }
		ruleColumnSet
		{ after(grammarAccess.getColumnSetAccess().getArgBin2ColumnSetParserRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__ArgR1Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnSetAccess().getArgR1INTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getColumnSetAccess().getArgR1INTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__ArgR2Assignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnSetAccess().getArgR2INTTerminalRuleCall_1_3_0()); }
		RULE_INT
		{ after(grammarAccess.getColumnSetAccess().getArgR2INTTerminalRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__ArgListAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnSetAccess().getArgListINTTerminalRuleCall_2_1_0_0()); }
		RULE_INT
		{ after(grammarAccess.getColumnSetAccess().getArgListINTTerminalRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSet__ArgListAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnSetAccess().getArgListINTTerminalRuleCall_2_2_0()); }
		RULE_INT
		{ after(grammarAccess.getColumnSetAccess().getArgListINTTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinopAccess().getTypeAndKeyword_0_0()); }
		(
			{ before(grammarAccess.getBinopAccess().getTypeAndKeyword_0_0()); }
			'and'
			{ after(grammarAccess.getBinopAccess().getTypeAndKeyword_0_0()); }
		)
		{ after(grammarAccess.getBinopAccess().getTypeAndKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinopAccess().getTypeExceptKeyword_1_0()); }
		(
			{ before(grammarAccess.getBinopAccess().getTypeExceptKeyword_1_0()); }
			'except'
			{ after(grammarAccess.getBinopAccess().getTypeExceptKeyword_1_0()); }
		)
		{ after(grammarAccess.getBinopAccess().getTypeExceptKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetPredictive__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetPredictiveAccess().getTypeTargetKeyword_0_0()); }
		(
			{ before(grammarAccess.getTargetPredictiveAccess().getTypeTargetKeyword_0_0()); }
			'target'
			{ after(grammarAccess.getTargetPredictiveAccess().getTypeTargetKeyword_0_0()); }
		)
		{ after(grammarAccess.getTargetPredictiveAccess().getTypeTargetKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetPredictive__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetPredictiveAccess().getTypePredictiveKeyword_1_0()); }
		(
			{ before(grammarAccess.getTargetPredictiveAccess().getTypePredictiveKeyword_1_0()); }
			'predictive'
			{ after(grammarAccess.getTargetPredictiveAccess().getTypePredictiveKeyword_1_0()); }
		)
		{ after(grammarAccess.getTargetPredictiveAccess().getTypePredictiveKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__IntAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getIntINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getValueAccess().getIntINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__StrAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getStrSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getValueAccess().getStrSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__FloatAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getFloatFLOATParserRuleCall_2_0()); }
		ruleFLOAT
		{ after(grammarAccess.getValueAccess().getFloatFLOATParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__BoolAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getBoolBOOLParserRuleCall_3_0()); }
		ruleBOOL
		{ after(grammarAccess.getValueAccess().getBoolBOOLParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__IntPartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFLOATAccess().getIntPartINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getFLOATAccess().getIntPartINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__DecPartAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFLOATAccess().getDecPartINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getFLOATAccess().getDecPartINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBOOLAccess().getValueTrueKeyword_0_0()); }
		(
			{ before(grammarAccess.getBOOLAccess().getValueTrueKeyword_0_0()); }
			'true'
			{ after(grammarAccess.getBOOLAccess().getValueTrueKeyword_0_0()); }
		)
		{ after(grammarAccess.getBOOLAccess().getValueTrueKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBOOLAccess().getValueFalseKeyword_1_0()); }
		(
			{ before(grammarAccess.getBOOLAccess().getValueFalseKeyword_1_0()); }
			'false'
			{ after(grammarAccess.getBOOLAccess().getValueFalseKeyword_1_0()); }
		)
		{ after(grammarAccess.getBOOLAccess().getValueFalseKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
