/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.perfectML.generator.PerfectMLGenerator
import org.xtext.example.perfectML.perfectML.PerfectMLFile

@ExtendWith(InjectionExtension)
@InjectWith(PerfectMLInjectorProvider)
class PerfectMLParsingTest {
    @Inject
    ParseHelper<PerfectMLFile> parseHelper

    @Test
    def void loadModel() {
        val result = parseHelper.parse('''
            Use source data : "x"
            Use output file : "sortie"
            Use SVC with
            gamma = scale
            with 90 lines of training
            ;
        ''')
        Assertions.assertNotNull(result)
        val errors = result.eResource.errors
        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    }

    @Test
    def void smallProgram() {
        val gen = new PerfectMLGenerator()
        val prog = parseHelper.parse('''
            Use source data : "x"
            Use output file : "sortie"
            Use SVC with
            gamma = scale
            with 90 lines of training
            ;
        ''')
        val result = gen.compile(prog)
        
        val expectedResult = '''
			import pandas as pd
			import numpy as np
			
			input_path = "x"
			in_file = pd.read_csv(input_path).to_numpy()
			out_file = "sortie"
			from sklearn.svm import SVC
			clf = SVC()
			clf.set_params(gamma='scale')
			linesep = 90
			pred_indexes = set([n for n in range(len(in_file)-1)])
			target_indexes = set([len(in_file) - 1])
			training_lines = in_file[:linesep]
			testing_lines = in_file[linesep:]

			training_data = training_lines[:, pred_indexes]

			training_targets = training_lines[:, target_indexes]

			test_data = testing_lines[:, pred_indexes]

			result = []

			for column in training_targets:
				clf.fit(training_data, column)
				result.append(clf.predict(test_data))
				

			# write result to a csv file
			pd.DataFrame.to_csv(out_file, result)
        '''
        System.out.print(result)
        Assertions.assertEquals(result, expectedResult)
    }

}