/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.perfectML.generator.PerfectMLGenerator;
import org.xtext.example.perfectML.perfectML.PerfectMLFile;

@ExtendWith(InjectionExtension.class)
@InjectWith(PerfectMLInjectorProvider.class)
@SuppressWarnings("all")
public class PerfectMLCompileTest {
  @Inject
  private ParseHelper<PerfectMLFile> parseHelper;
  
  @Test
  public void doubleProgram() {
    try {
      final PerfectMLGenerator gen = new PerfectMLGenerator();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Use source data : \"x\"");
      _builder.newLine();
      _builder.append("Use output file : \"sortie\"");
      _builder.newLine();
      _builder.append("Use SVC with");
      _builder.newLine();
      _builder.append("gamma = scale");
      _builder.newLine();
      _builder.append("with 90 lines of training");
      _builder.newLine();
      _builder.append(";");
      _builder.newLine();
      _builder.append("Use source data : \"x2\"");
      _builder.newLine();
      _builder.append("Use output file : \"sortie2\"");
      _builder.newLine();
      _builder.append("Use SVC with");
      _builder.newLine();
      _builder.append("gamma = scale");
      _builder.newLine();
      _builder.append("with 100 lines of training");
      _builder.newLine();
      _builder.append(";");
      _builder.newLine();
      final PerfectMLFile prog = this.parseHelper.parse(_builder);
      final String result = gen.compile(prog);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import pandas as pd");
      _builder_1.newLine();
      _builder_1.append("import numpy as np");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("input_path = \"x\"");
      _builder_1.newLine();
      _builder_1.append("in_file = pd.read_csv(input_path).to_numpy()");
      _builder_1.newLine();
      _builder_1.append("out_file = \"sortie\"");
      _builder_1.newLine();
      _builder_1.append("from sklearn.svm import SVC");
      _builder_1.newLine();
      _builder_1.append("clf = SVC()");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(gamma=\'scale\')");
      _builder_1.newLine();
      _builder_1.append("linesep = 90");
      _builder_1.newLine();
      _builder_1.append("pred_indexes = set([n for n in range(len(in_file)-1)])");
      _builder_1.newLine();
      _builder_1.append("target_indexes = set([len(in_file) - 1])");
      _builder_1.newLine();
      _builder_1.append("training_lines = in_file[:linesep]");
      _builder_1.newLine();
      _builder_1.append("testing_lines = in_file[linesep:]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_data = training_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_targets = training_lines[:, target_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("test_data = testing_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("result = []");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("for column in training_targets:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("clf.fit(training_data, column)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("result.append(clf.predict(test_data))");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# write result to a csv file");
      _builder_1.newLine();
      _builder_1.append("pd.DataFrame.to_csv(out_file, result)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("input_path = \"x2\"");
      _builder_1.newLine();
      _builder_1.append("in_file = pd.read_csv(input_path).to_numpy()");
      _builder_1.newLine();
      _builder_1.append("out_file = \"sortie2\"");
      _builder_1.newLine();
      _builder_1.append("from sklearn.svm import SVC");
      _builder_1.newLine();
      _builder_1.append("clf = SVC()");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(gamma=\'scale\')");
      _builder_1.newLine();
      _builder_1.append("linesep = 100");
      _builder_1.newLine();
      _builder_1.append("pred_indexes = set([n for n in range(len(in_file)-1)])");
      _builder_1.newLine();
      _builder_1.append("target_indexes = set([len(in_file) - 1])");
      _builder_1.newLine();
      _builder_1.append("training_lines = in_file[:linesep]");
      _builder_1.newLine();
      _builder_1.append("testing_lines = in_file[linesep:]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_data = training_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_targets = training_lines[:, target_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("test_data = testing_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("result = []");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("for column in training_targets:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("clf.fit(training_data, column)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("result.append(clf.predict(test_data))");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# write result to a csv file");
      _builder_1.newLine();
      _builder_1.append("pd.DataFrame.to_csv(out_file, result)");
      _builder_1.newLine();
      final String expectedResult = _builder_1.toString();
      System.out.print(result);
      Assertions.assertEquals(result, expectedResult);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
