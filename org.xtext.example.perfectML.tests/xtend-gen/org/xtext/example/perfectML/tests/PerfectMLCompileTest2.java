/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.perfectML.generator.PerfectMLGenerator;
import org.xtext.example.perfectML.perfectML.PerfectMLFile;

@ExtendWith(InjectionExtension.class)
@InjectWith(PerfectMLInjectorProvider.class)
@SuppressWarnings("all")
public class PerfectMLCompileTest2 {
  @Inject
  private ParseHelper<PerfectMLFile> parseHelper;
  
  @Test
  public void SVCProgram() {
    try {
      final PerfectMLGenerator gen = new PerfectMLGenerator();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Use source data : \"x\"");
      _builder.newLine();
      _builder.append("Use output file : \"sortie\"");
      _builder.newLine();
      _builder.append("Use SVC with");
      _builder.newLine();
      _builder.append("C=0.5");
      _builder.newLine();
      _builder.append("kernel=rbf");
      _builder.newLine();
      _builder.append("degree=7");
      _builder.newLine();
      _builder.append("gamma=scale");
      _builder.newLine();
      _builder.append("coef0=0.7");
      _builder.newLine();
      _builder.append("shrinking=True");
      _builder.newLine();
      _builder.append("probability=False");
      _builder.newLine();
      _builder.append("tolerance=0.2");
      _builder.newLine();
      _builder.append("cache_size=1.3");
      _builder.newLine();
      _builder.append("verbose=True");
      _builder.newLine();
      _builder.append("max_iter=3");
      _builder.newLine();
      _builder.append("decision_function_shape=ovo");
      _builder.newLine();
      _builder.append("break_ties=False");
      _builder.newLine();
      _builder.append("random_state=9");
      _builder.newLine();
      _builder.append("with 90 lines of training");
      _builder.newLine();
      _builder.append(";");
      _builder.newLine();
      final PerfectMLFile prog = this.parseHelper.parse(_builder);
      final String result = gen.compile(prog);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import pandas as pd");
      _builder_1.newLine();
      _builder_1.append("import numpy as np");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("input_path = \"x\"");
      _builder_1.newLine();
      _builder_1.append("in_file = pd.read_csv(input_path).to_numpy()");
      _builder_1.newLine();
      _builder_1.append("out_file = \"sortie\"");
      _builder_1.newLine();
      _builder_1.append("from sklearn.svm import SVC");
      _builder_1.newLine();
      _builder_1.append("clf = SVC()");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(c=0.5)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(kernel=\'rbf\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(degree=7)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(gamma=\'scale\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(coef0=0.7)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(shrinking=True)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(probability=False)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(tol=0.2)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(cache_size=1.3)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(verbose=True)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(max_iter=3)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(decision_function_shape=\'ovo\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(break_ties=False)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(random_state=9)");
      _builder_1.newLine();
      _builder_1.append("linesep = 90");
      _builder_1.newLine();
      _builder_1.append("pred_indexes = set([n for n in range(len(in_file)-1)])");
      _builder_1.newLine();
      _builder_1.append("target_indexes = set([len(in_file) - 1])");
      _builder_1.newLine();
      _builder_1.append("training_lines = in_file[:linesep]");
      _builder_1.newLine();
      _builder_1.append("testing_lines = in_file[linesep:]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_data = training_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_targets = training_lines[:, target_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("test_data = testing_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("result = []");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("for column in training_targets:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("clf.fit(training_data, column)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("result.append(clf.predict(test_data))");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# write result to a csv file");
      _builder_1.newLine();
      _builder_1.append("pd.DataFrame.to_csv(out_file, result)");
      _builder_1.newLine();
      final String expectedResult = _builder_1.toString();
      System.out.print(result);
      Assertions.assertEquals(result, expectedResult);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void MLPProgram() {
    try {
      final PerfectMLGenerator gen = new PerfectMLGenerator();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Use source data : \"x\"");
      _builder.newLine();
      _builder.append("Use output file : \"sortie\"");
      _builder.newLine();
      _builder.append("Use MLPClassifier with");
      _builder.newLine();
      _builder.append("hidden_layer_sizes=(4,5,6)");
      _builder.newLine();
      _builder.append("activation=identity");
      _builder.newLine();
      _builder.append("solver=lbfgs");
      _builder.newLine();
      _builder.append("alpha=0.5");
      _builder.newLine();
      _builder.append("batch_size=4");
      _builder.newLine();
      _builder.append("learning_rate=constant");
      _builder.newLine();
      _builder.append("learning_rate_init=0.7");
      _builder.newLine();
      _builder.append("power_t=0.6");
      _builder.newLine();
      _builder.append("max_iter=0.8");
      _builder.newLine();
      _builder.append("shuffle=True");
      _builder.newLine();
      _builder.append("random_state=4");
      _builder.newLine();
      _builder.append("tolerance=1.8");
      _builder.newLine();
      _builder.append("verbose=False");
      _builder.newLine();
      _builder.append("warm_start=True");
      _builder.newLine();
      _builder.append("momentum=0.3");
      _builder.newLine();
      _builder.append("nesterovs_momentum=True");
      _builder.newLine();
      _builder.append("early_stopping=False");
      _builder.newLine();
      _builder.append("validation_fraction=0.4");
      _builder.newLine();
      _builder.append("beta_1=0.2");
      _builder.newLine();
      _builder.append("beta_2=0.1");
      _builder.newLine();
      _builder.append("epsilon=0.1");
      _builder.newLine();
      _builder.append("n_iter_no_change=6");
      _builder.newLine();
      _builder.append("max_fun=7");
      _builder.newLine();
      _builder.append("with 90 lines of training");
      _builder.newLine();
      _builder.append(";");
      _builder.newLine();
      final PerfectMLFile prog = this.parseHelper.parse(_builder);
      final String result = gen.compile(prog);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import pandas as pd");
      _builder_1.newLine();
      _builder_1.append("import numpy as np");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("input_path = \"x\"");
      _builder_1.newLine();
      _builder_1.append("in_file = pd.read_csv(input_path).to_numpy()");
      _builder_1.newLine();
      _builder_1.append("out_file = \"sortie\"");
      _builder_1.newLine();
      _builder_1.append("from sklearn.neural_network import MLPClassifier");
      _builder_1.newLine();
      _builder_1.append("clf = MLPClassifier()");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(hidden_layer_sizes=[4, 5, 6])");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(activation=\'identity\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(solver=\'lbfgs\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(alpha=0.5)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(batch_size=4)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(learning_rate=\'constant\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(learning_rate_init=0.7)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(power_t=0.6)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(max_iter=0.8)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(shuffle=True)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(random_state=4)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(tolerance=1.8)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(verbose=False)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(warm_start=True)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(momentum=0.3)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(nesterovs_momentum=True)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(early_stopping=False)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(validation_fraction=0.4)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(beta_1=0.2)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(beta_2=0.1)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(epsilon=0.1)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(n_iter_no_change=6)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(max_fun=7)");
      _builder_1.newLine();
      _builder_1.append("linesep = 90");
      _builder_1.newLine();
      _builder_1.append("pred_indexes = set([n for n in range(len(in_file)-1)])");
      _builder_1.newLine();
      _builder_1.append("target_indexes = set([len(in_file) - 1])");
      _builder_1.newLine();
      _builder_1.append("training_lines = in_file[:linesep]");
      _builder_1.newLine();
      _builder_1.append("testing_lines = in_file[linesep:]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_data = training_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_targets = training_lines[:, target_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("test_data = testing_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("result = []");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("for column in training_targets:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("clf.fit(training_data, column)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("result.append(clf.predict(test_data))");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# write result to a csv file");
      _builder_1.newLine();
      _builder_1.append("pd.DataFrame.to_csv(out_file, result)");
      _builder_1.newLine();
      final String expectedResult = _builder_1.toString();
      System.out.print(result);
      Assertions.assertEquals(result, expectedResult);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void KNCProgram() {
    try {
      final PerfectMLGenerator gen = new PerfectMLGenerator();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Use source data : \"x\"");
      _builder.newLine();
      _builder.append("Use output file : \"sortie\"");
      _builder.newLine();
      _builder.append("Use KNeighborsClassifier with");
      _builder.newLine();
      _builder.append("n_neighbors=5");
      _builder.newLine();
      _builder.append("weights=uniform");
      _builder.newLine();
      _builder.append("algorithm=auto");
      _builder.newLine();
      _builder.append("leaf_size=4");
      _builder.newLine();
      _builder.append("p=3");
      _builder.newLine();
      _builder.append("metric=mahalanobis");
      _builder.newLine();
      _builder.append("n_jobs=2");
      _builder.newLine();
      _builder.append("with 90 lines of training");
      _builder.newLine();
      _builder.append(";");
      _builder.newLine();
      final PerfectMLFile prog = this.parseHelper.parse(_builder);
      final String result = gen.compile(prog);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import pandas as pd");
      _builder_1.newLine();
      _builder_1.append("import numpy as np");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("input_path = \"x\"");
      _builder_1.newLine();
      _builder_1.append("in_file = pd.read_csv(input_path).to_numpy()");
      _builder_1.newLine();
      _builder_1.append("out_file = \"sortie\"");
      _builder_1.newLine();
      _builder_1.append("from sklearn.neighbors import KNeighborsClassifier");
      _builder_1.newLine();
      _builder_1.append("clf = KNeighborsClassifier()");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(n_neighbors=5)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(weights=\'uniform\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(algorithm=\'auto\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(leaf_size=4)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(p=3)");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(metric=\'mahalanobis\')");
      _builder_1.newLine();
      _builder_1.append("clf.set_params(n_jobs=2)");
      _builder_1.newLine();
      _builder_1.append("linesep = 90");
      _builder_1.newLine();
      _builder_1.append("pred_indexes = set([n for n in range(len(in_file)-1)])");
      _builder_1.newLine();
      _builder_1.append("target_indexes = set([len(in_file) - 1])");
      _builder_1.newLine();
      _builder_1.append("training_lines = in_file[:linesep]");
      _builder_1.newLine();
      _builder_1.append("testing_lines = in_file[linesep:]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_data = training_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("training_targets = training_lines[:, target_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("test_data = testing_lines[:, pred_indexes]");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("result = []");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("for column in training_targets:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("clf.fit(training_data, column)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("result.append(clf.predict(test_data))");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# write result to a csv file");
      _builder_1.newLine();
      _builder_1.append("pd.DataFrame.to_csv(out_file, result)");
      _builder_1.newLine();
      final String expectedResult = _builder_1.toString();
      System.out.print(result);
      Assertions.assertEquals(result, expectedResult);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
