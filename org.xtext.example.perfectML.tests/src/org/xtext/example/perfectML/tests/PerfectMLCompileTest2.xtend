/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.perfectML.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.perfectML.generator.PerfectMLGenerator
import org.xtext.example.perfectML.perfectML.PerfectMLFile

@ExtendWith(InjectionExtension)
@InjectWith(PerfectMLInjectorProvider)
class PerfectMLCompileTest2 {
    @Inject
    ParseHelper<PerfectMLFile> parseHelper

    @Test
    def void SVCProgram() {
        val gen = new PerfectMLGenerator()
        val prog = parseHelper.parse('''
            Use source data : "x"
            Use output file : "sortie"
            Use SVC with
            C=0.5
            kernel=rbf
            degree=7
            gamma=scale
            coef0=0.7
            shrinking=True
            probability=False
            tolerance=0.2
            cache_size=1.3
            verbose=True
            max_iter=3
            decision_function_shape=ovo
            break_ties=False
            random_state=9
            with 90 lines of training
            ;
        ''')
        val result = gen.compile(prog)
        
        val expectedResult = '''
			import pandas as pd
			import numpy as np
			
			input_path = "x"
			in_file = pd.read_csv(input_path).to_numpy()
			out_file = "sortie"
			from sklearn.svm import SVC
			clf = SVC()
			clf.set_params(c=0.5)
			clf.set_params(kernel='rbf')
			clf.set_params(degree=7)
			clf.set_params(gamma='scale')
			clf.set_params(coef0=0.7)
			clf.set_params(shrinking=True)
			clf.set_params(probability=False)
			clf.set_params(tol=0.2)
			clf.set_params(cache_size=1.3)
			clf.set_params(verbose=True)
			clf.set_params(max_iter=3)
			clf.set_params(decision_function_shape='ovo')
			clf.set_params(break_ties=False)
			clf.set_params(random_state=9)
			linesep = 90
			pred_indexes = set([n for n in range(len(in_file)-1)])
			target_indexes = set([len(in_file) - 1])
			training_lines = in_file[:linesep]
			testing_lines = in_file[linesep:]
			
			training_data = training_lines[:, pred_indexes]
			
			training_targets = training_lines[:, target_indexes]
			
			test_data = testing_lines[:, pred_indexes]
			
			result = []
			
			for column in training_targets:
				clf.fit(training_data, column)
				result.append(clf.predict(test_data))
				
			
			# write result to a csv file
			pd.DataFrame.to_csv(out_file, result)
        '''
        System.out.print(result)
        Assertions.assertEquals(result, expectedResult)
    }

    @Test
    def void MLPProgram() {
        val gen = new PerfectMLGenerator()
        val prog = parseHelper.parse('''
            Use source data : "x"
            Use output file : "sortie"
            Use MLPClassifier with
            hidden_layer_sizes=(4,5,6)
            activation=identity
            solver=lbfgs
            alpha=0.5
            batch_size=4
            learning_rate=constant
            learning_rate_init=0.7
            power_t=0.6
            max_iter=0.8
            shuffle=True
            random_state=4
            tolerance=1.8
            verbose=False
            warm_start=True
            momentum=0.3
            nesterovs_momentum=True
            early_stopping=False
            validation_fraction=0.4
            beta_1=0.2
            beta_2=0.1
            epsilon=0.1
            n_iter_no_change=6
            max_fun=7
            with 90 lines of training
            ;
        ''')
        val result = gen.compile(prog)
        
        val expectedResult = '''
			import pandas as pd
			import numpy as np
			
			input_path = "x"
			in_file = pd.read_csv(input_path).to_numpy()
			out_file = "sortie"
			from sklearn.neural_network import MLPClassifier
			clf = MLPClassifier()
			clf.set_params(hidden_layer_sizes=[4, 5, 6])
			clf.set_params(activation='identity')
			clf.set_params(solver='lbfgs')
			clf.set_params(alpha=0.5)
			clf.set_params(batch_size=4)
			clf.set_params(learning_rate='constant')
			clf.set_params(learning_rate_init=0.7)
			clf.set_params(power_t=0.6)
			clf.set_params(max_iter=0.8)
			clf.set_params(shuffle=True)
			clf.set_params(random_state=4)
			clf.set_params(tolerance=1.8)
			clf.set_params(verbose=False)
			clf.set_params(warm_start=True)
			clf.set_params(momentum=0.3)
			clf.set_params(nesterovs_momentum=True)
			clf.set_params(early_stopping=False)
			clf.set_params(validation_fraction=0.4)
			clf.set_params(beta_1=0.2)
			clf.set_params(beta_2=0.1)
			clf.set_params(epsilon=0.1)
			clf.set_params(n_iter_no_change=6)
			clf.set_params(max_fun=7)
			linesep = 90
			pred_indexes = set([n for n in range(len(in_file)-1)])
			target_indexes = set([len(in_file) - 1])
			training_lines = in_file[:linesep]
			testing_lines = in_file[linesep:]
			
			training_data = training_lines[:, pred_indexes]
			
			training_targets = training_lines[:, target_indexes]
			
			test_data = testing_lines[:, pred_indexes]
			
			result = []
			
			for column in training_targets:
				clf.fit(training_data, column)
				result.append(clf.predict(test_data))
				
			
			# write result to a csv file
			pd.DataFrame.to_csv(out_file, result)
	        '''
        System.out.print(result)
        Assertions.assertEquals(result, expectedResult)
    }

    @Test
    def void KNCProgram() {
        val gen = new PerfectMLGenerator()
        val prog = parseHelper.parse('''
            Use source data : "x"
            Use output file : "sortie"
            Use KNeighborsClassifier with
            n_neighbors=5
            weights=uniform
            algorithm=auto
            leaf_size=4
            p=3
            metric=mahalanobis
            n_jobs=2
            with 90 lines of training
            ;
        ''')
        val result = gen.compile(prog)
        
        val expectedResult = '''
			import pandas as pd
			import numpy as np
			
			input_path = "x"
			in_file = pd.read_csv(input_path).to_numpy()
			out_file = "sortie"
			from sklearn.neighbors import KNeighborsClassifier
			clf = KNeighborsClassifier()
			clf.set_params(n_neighbors=5)
			clf.set_params(weights='uniform')
			clf.set_params(algorithm='auto')
			clf.set_params(leaf_size=4)
			clf.set_params(p=3)
			clf.set_params(metric='mahalanobis')
			clf.set_params(n_jobs=2)
			linesep = 90
			pred_indexes = set([n for n in range(len(in_file)-1)])
			target_indexes = set([len(in_file) - 1])
			training_lines = in_file[:linesep]
			testing_lines = in_file[linesep:]
			
			training_data = training_lines[:, pred_indexes]
			
			training_targets = training_lines[:, target_indexes]
			
			test_data = testing_lines[:, pred_indexes]
			
			result = []
			
			for column in training_targets:
				clf.fit(training_data, column)
				result.append(clf.predict(test_data))
				
			
			# write result to a csv file
			pd.DataFrame.to_csv(out_file, result)
        '''
        System.out.print(result)
        Assertions.assertEquals(result, expectedResult)
    }
}